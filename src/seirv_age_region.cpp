// Generated by dust (version 0.15.3) - do not edit
#include <cpp11.hpp>

[[cpp11::register]]
cpp11::sexp dust_seirv_age_region_gpu_info();
[[cpp11::register]]
SEXP dust_cpu_seirv_age_region_alloc(cpp11::list r_pars, bool pars_multi, cpp11::sexp r_time,
                         cpp11::sexp r_n_particles, int n_threads,
                         cpp11::sexp r_seed, bool deterministic,
                         cpp11::sexp gpu_config, cpp11::sexp ode_control);

[[cpp11::register]]
cpp11::sexp dust_cpu_seirv_age_region_capabilities();

[[cpp11::register]]
SEXP dust_cpu_seirv_age_region_run(SEXP ptr, cpp11::sexp r_time_end);

[[cpp11::register]]
SEXP dust_cpu_seirv_age_region_simulate(SEXP ptr, cpp11::sexp time_end);

[[cpp11::register]]
SEXP dust_cpu_seirv_age_region_run_adjoint(SEXP ptr);

[[cpp11::register]]
SEXP dust_cpu_seirv_age_region_set_index(SEXP ptr, cpp11::sexp r_index);

[[cpp11::register]]
SEXP dust_cpu_seirv_age_region_update_state(SEXP ptr, SEXP r_pars, SEXP r_state,
                                           SEXP r_time, SEXP r_set_initial_state,
                                           SEXP index, SEXP reset_step_size);

[[cpp11::register]]
SEXP dust_cpu_seirv_age_region_state(SEXP ptr, SEXP r_index);

[[cpp11::register]]
SEXP dust_cpu_seirv_age_region_time(SEXP ptr);

[[cpp11::register]]
void dust_cpu_seirv_age_region_reorder(SEXP ptr, cpp11::sexp r_index);

[[cpp11::register]]
SEXP dust_cpu_seirv_age_region_resample(SEXP ptr, cpp11::doubles r_weights);

[[cpp11::register]]
SEXP dust_cpu_seirv_age_region_rng_state(SEXP ptr, bool first_only, bool last_only);

[[cpp11::register]]
SEXP dust_cpu_seirv_age_region_set_rng_state(SEXP ptr, cpp11::raws rng_state);

[[cpp11::register]]
SEXP dust_cpu_seirv_age_region_set_data(SEXP ptr, cpp11::list data, bool shared);

[[cpp11::register]]
SEXP dust_cpu_seirv_age_region_compare_data(SEXP ptr);

[[cpp11::register]]
SEXP dust_cpu_seirv_age_region_filter(SEXP ptr, SEXP time_end,
                                     bool save_trajectories,
                                     cpp11::sexp time_snapshot,
                                     cpp11::sexp min_log_likelihood);

[[cpp11::register]]
void dust_cpu_seirv_age_region_set_n_threads(SEXP ptr, int n_threads);

[[cpp11::register]]
int dust_cpu_seirv_age_region_n_state(SEXP ptr);

[[cpp11::register]]
void dust_cpu_seirv_age_region_set_stochastic_schedule(SEXP ptr, SEXP time);

[[cpp11::register]]
SEXP dust_cpu_seirv_age_region_ode_statistics(SEXP ptr);
#include <dust/r/dust.hpp>

// Generated by odin.dust (version 0.3.13) - do not edit
template <typename real_type, typename container>
__host__ __device__ real_type odin_sum1(const container x, size_t from, size_t to);
template <typename real_type, typename container>
__host__ __device__ real_type odin_sum2(const container x, int from_i, int to_i, int from_j, int to_j, int dim_x_1);
template <typename real_type, typename container>
__host__ __device__ real_type odin_sum3(const container x, int from_i, int to_i, int from_j, int to_j, int from_k, int to_k, int dim_x_1, int dim_x_12);
template <typename real_type, typename container>
__host__ __device__ real_type odin_sum4(const container x, int from_i, int to_i, int from_j, int to_j, int from_k, int to_k, int from_l, int to_l, int dim_x_1, int dim_x_12, int dim_x_123);
template <typename real_type, typename T, typename U>
__host__ __device__ real_type fintdiv(T x, U y) {
  return std::floor(x / y);
}

template <typename real_type, typename T, typename U>
__host__ __device__ real_type fmodr(T x, U y) {
  real_type tmp = std::fmod(static_cast<real_type>(x),
                            static_cast<real_type>(y));
  if (tmp * y < 0) {
    tmp += y;
  }
  return tmp;
}

// These exist to support the model on the gpu, as in C++14 std::min
// and std::max are constexpr and error without --expt-relaxed-constexpr
template <typename T>
__host__ __device__ T odin_min(T x, T y) {
  return x < y ? x : y;
}

template <typename T>
__host__ __device__ T odin_max(T x, T y) {
  return x > y ? x : y;
}

template <typename T>
__host__ __device__ T odin_sign(T x) {
  return (x > 0) ? 1 : ((x < 0) ? -1 : 0);
}
// [[dust::class(seirv_age_region)]]
// [[dust::time_type(discrete)]]
// [[dust::param(array_cov1, has_default = FALSE, default_value = NULL, rank = 3, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(array_cov2, has_default = FALSE, default_value = NULL, rank = 3, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(array_new, has_default = FALSE, default_value = NULL, rank = 2, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(beta, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(c, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(d, has_default = FALSE, default_value = NULL, rank = 2, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(Es_init, has_default = FALSE, default_value = NULL, rank = 2, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(Ev1_init, has_default = FALSE, default_value = NULL, rank = 2, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(Ev2_init, has_default = FALSE, default_value = NULL, rank = 2, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(Is_init, has_default = FALSE, default_value = NULL, rank = 2, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(Iv1_init, has_default = FALSE, default_value = NULL, rank = 2, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(Iv2_init, has_default = FALSE, default_value = NULL, rank = 2, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(m, has_default = FALSE, default_value = NULL, rank = 2, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(mean_import, has_default = FALSE, default_value = NULL, rank = 2, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(recov, has_default = FALSE, default_value = NULL, rank = 2, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(S_init, has_default = FALSE, default_value = NULL, rank = 2, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(theta, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(V1_init, has_default = FALSE, default_value = NULL, rank = 2, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(V2_init, has_default = FALSE, default_value = NULL, rank = 2, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(waning, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(X_import, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(Y_import, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(year_per_age, has_default = FALSE, default_value = NULL, rank = 1, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(year_start, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(alpha, has_default = TRUE, default_value = list("/", 1L, 11L), rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(b, has_default = TRUE, default_value = 0L, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(delta, has_default = TRUE, default_value = list("/", 1L, 120L), rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(dt, has_default = TRUE, default_value = 1L, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(gamma, has_default = TRUE, default_value = list("/", 1L, 8L), rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(N_age, has_default = TRUE, default_value = 2L, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(N_reg, has_default = TRUE, default_value = 2L, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(N_time, has_default = TRUE, default_value = 2L, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(v_fail, has_default = TRUE, default_value = 0.02, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(v_leak, has_default = TRUE, default_value = 0L, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(v_sec, has_default = TRUE, default_value = 0L, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(vacc, has_default = TRUE, default_value = 1L, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(X, has_default = TRUE, default_value = 1L, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(Y, has_default = TRUE, default_value = 1L, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
class seirv_age_region {
public:
  using real_type = double;
  using rng_state_type = dust::random::generator<real_type>;
  using data_type = dust::no_data;
  struct shared_type {
    real_type alpha;
    std::vector<real_type> array_cov1;
    std::vector<real_type> array_cov2;
    std::vector<real_type> array_new;
    real_type b;
    real_type beta;
    real_type c;
    std::vector<real_type> d;
    real_type delta;
    int dim_array_cov1;
    int dim_array_cov1_1;
    int dim_array_cov1_12;
    int dim_array_cov1_2;
    int dim_array_cov1_3;
    int dim_array_cov2;
    int dim_array_cov2_1;
    int dim_array_cov2_12;
    int dim_array_cov2_2;
    int dim_array_cov2_3;
    int dim_array_new;
    int dim_array_new_1;
    int dim_array_new_2;
    int dim_cases_ij;
    int dim_cases_ij_1;
    int dim_cases_ij_2;
    int dim_cases_ijkl;
    int dim_cases_ijkl_1;
    int dim_cases_ijkl_12;
    int dim_cases_ijkl_123;
    int dim_cases_ijkl_2;
    int dim_cases_ijkl_3;
    int dim_cases_ijkl_4;
    int dim_d;
    int dim_d_1;
    int dim_d_2;
    int dim_d_a;
    int dim_d_a_1;
    int dim_d_a_2;
    int dim_Es;
    int dim_Es_1;
    int dim_Es_2;
    int dim_Es_init;
    int dim_Es_init_1;
    int dim_Es_init_2;
    int dim_Ev1;
    int dim_Ev1_1;
    int dim_Ev1_2;
    int dim_Ev1_init;
    int dim_Ev1_init_1;
    int dim_Ev1_init_2;
    int dim_Ev2;
    int dim_Ev2_1;
    int dim_Ev2_2;
    int dim_Ev2_init;
    int dim_Ev2_init_1;
    int dim_Ev2_init_2;
    int dim_import_t;
    int dim_import_t_1;
    int dim_import_t_2;
    int dim_Is;
    int dim_Is_1;
    int dim_Is_2;
    int dim_Is_init;
    int dim_Is_init_1;
    int dim_Is_init_2;
    int dim_Iv1;
    int dim_Iv1_1;
    int dim_Iv1_2;
    int dim_Iv1_init;
    int dim_Iv1_init_1;
    int dim_Iv1_init_2;
    int dim_Iv2;
    int dim_Iv2_1;
    int dim_Iv2_2;
    int dim_Iv2_init;
    int dim_Iv2_init_1;
    int dim_Iv2_init_2;
    int dim_lambda;
    int dim_lambda_1;
    int dim_lambda_2;
    int dim_lambda_t;
    int dim_lambda_t_1;
    int dim_lambda_t_2;
    int dim_m;
    int dim_M;
    int dim_m_1;
    int dim_M_1;
    int dim_m_2;
    int dim_M_2;
    int dim_mean_import;
    int dim_mean_import_1;
    int dim_mean_import_2;
    int dim_mean_R;
    int dim_mean_R_1;
    int dim_mean_R_2;
    int dim_mean_RV1;
    int dim_mean_RV1_1;
    int dim_mean_RV1_2;
    int dim_mean_RV2;
    int dim_mean_RV2_1;
    int dim_mean_RV2_2;
    int dim_mean_S;
    int dim_mean_S_1;
    int dim_mean_S_2;
    int dim_mean_V1;
    int dim_mean_V1_1;
    int dim_mean_V1_2;
    int dim_mean_V1p;
    int dim_mean_V1p_1;
    int dim_mean_V1p_2;
    int dim_mean_V2;
    int dim_mean_V2_1;
    int dim_mean_V2_2;
    int dim_mean_V2p;
    int dim_mean_V2p_1;
    int dim_mean_V2p_2;
    int dim_N_ageing_S;
    int dim_N_ageing_S_1;
    int dim_N_ageing_S_2;
    int dim_N_ageing_V1;
    int dim_N_ageing_V1_1;
    int dim_N_ageing_V1_2;
    int dim_N_ageing_V2;
    int dim_N_ageing_V2_1;
    int dim_N_ageing_V2_2;
    int dim_n_EsIs;
    int dim_n_EsIs_1;
    int dim_n_EsIs_2;
    int dim_n_Ev12v2;
    int dim_n_Ev12v2_1;
    int dim_n_Ev12v2_2;
    int dim_n_Ev1Iv1;
    int dim_n_Ev1Iv1_1;
    int dim_n_Ev1Iv1_2;
    int dim_n_IsR;
    int dim_n_IsR_1;
    int dim_n_IsR_2;
    int dim_n_Iv1R;
    int dim_n_Iv1R_1;
    int dim_n_Iv1R_2;
    int dim_n_Iv2R;
    int dim_n_Iv2R_1;
    int dim_n_Iv2R_2;
    int dim_n_MS;
    int dim_n_R;
    int dim_n_R_1;
    int dim_n_R_2;
    int dim_n_RR;
    int dim_n_RR_1;
    int dim_n_RR_2;
    int dim_n_RRV1;
    int dim_n_RRV1_1;
    int dim_n_RRV1_2;
    int dim_n_RV1;
    int dim_n_RV1_1;
    int dim_n_RV1_2;
    int dim_n_RV1RV1;
    int dim_n_RV1RV1_1;
    int dim_n_RV1RV1_2;
    int dim_n_RV1RV2;
    int dim_n_RV1RV2_1;
    int dim_n_RV1RV2_2;
    int dim_n_RV2RV2;
    int dim_n_RV2RV2_1;
    int dim_n_RV2RV2_2;
    int dim_n_S;
    int dim_n_S_1;
    int dim_n_S_2;
    int dim_n_SEs;
    int dim_n_SEs_1;
    int dim_n_SEs_2;
    int dim_n_SS;
    int dim_n_SS_1;
    int dim_n_SS_2;
    int dim_N_strat;
    int dim_N_strat_1;
    int dim_N_strat_2;
    int dim_n_SV1;
    int dim_n_SV1_1;
    int dim_n_SV1_2;
    int dim_n_SV1p;
    int dim_n_SV1p_1;
    int dim_n_SV1p_2;
    int dim_n_SVtot;
    int dim_n_SVtot_1;
    int dim_n_SVtot_2;
    int dim_n_V1;
    int dim_n_V1_1;
    int dim_n_V1_2;
    int dim_n_v1E;
    int dim_n_v1E_1;
    int dim_n_v1E_2;
    int dim_n_V1p;
    int dim_n_V1p_1;
    int dim_n_V1p_2;
    int dim_n_v1pE;
    int dim_n_v1pE_1;
    int dim_n_v1pE_2;
    int dim_n_V1pV1p;
    int dim_n_V1pV1p_1;
    int dim_n_V1pV1p_2;
    int dim_n_V1pV2p;
    int dim_n_V1pV2p_1;
    int dim_n_V1pV2p_2;
    int dim_n_V1V1;
    int dim_n_V1V1_1;
    int dim_n_V1V1_2;
    int dim_n_V1V2;
    int dim_n_V1V2_1;
    int dim_n_V1V2_2;
    int dim_n_V1V2p;
    int dim_n_V1V2p_1;
    int dim_n_V1V2p_2;
    int dim_n_V1V2tot;
    int dim_n_V1V2tot_1;
    int dim_n_V1V2tot_2;
    int dim_n_v2E;
    int dim_n_v2E_1;
    int dim_n_v2E_2;
    int dim_n_v2pE;
    int dim_n_v2pE_1;
    int dim_n_v2pE_2;
    int dim_n_V2pV2p;
    int dim_n_V2pV2p_1;
    int dim_n_V2pV2p_2;
    int dim_n_V2V2;
    int dim_n_V2V2_1;
    int dim_n_V2V2_2;
    int dim_new_birth;
    int dim_new_IS;
    int dim_new_IS_1;
    int dim_new_IS_2;
    int dim_new_IV1;
    int dim_new_IV1_1;
    int dim_new_IV1_2;
    int dim_new_IV2;
    int dim_new_IV2_1;
    int dim_new_IV2_2;
    int dim_p_MS;
    int dim_p_SE;
    int dim_p_SE_1;
    int dim_p_SE_2;
    int dim_p_SEv1;
    int dim_p_SEv1_1;
    int dim_p_SEv1_2;
    int dim_p_SEv2;
    int dim_p_SEv2_1;
    int dim_p_SEv2_2;
    int dim_pop_per_age_s;
    int dim_pop_per_age_s_1;
    int dim_pop_per_age_s_2;
    int dim_pop_per_age_v1;
    int dim_pop_per_age_v1_1;
    int dim_pop_per_age_v1_2;
    int dim_pop_per_age_v2;
    int dim_pop_per_age_v2_1;
    int dim_pop_per_age_v2_2;
    int dim_prop_after_change;
    int dim_prop_v1;
    int dim_prop_v1_1;
    int dim_prop_v1_2;
    int dim_prop_v1v2;
    int dim_prop_v1v2_1;
    int dim_prop_v1v2_2;
    int dim_R;
    int dim_R_1;
    int dim_R_2;
    int dim_recov;
    int dim_recov_1;
    int dim_recov_2;
    int dim_RV1;
    int dim_RV1_1;
    int dim_RV1_2;
    int dim_RV2;
    int dim_RV2_1;
    int dim_RV2_2;
    int dim_S;
    int dim_S_1;
    int dim_S_2;
    int dim_S_init;
    int dim_S_init_1;
    int dim_S_init_2;
    int dim_V1;
    int dim_V1_1;
    int dim_V1_2;
    int dim_V1_init;
    int dim_V1_init_1;
    int dim_V1_init_2;
    int dim_V1p;
    int dim_V1p_1;
    int dim_V1p_2;
    int dim_v2;
    int dim_V2;
    int dim_V2_1;
    int dim_V2_2;
    int dim_V2_init;
    int dim_V2_init_1;
    int dim_V2_init_2;
    int dim_V2p;
    int dim_V2p_1;
    int dim_V2p_2;
    int dim_year_per_age;
    real_type dt;
    std::vector<real_type> Es_init;
    std::vector<real_type> Ev1_init;
    std::vector<real_type> Ev2_init;
    real_type gamma;
    std::vector<real_type> initial_Es;
    std::vector<real_type> initial_Ev1;
    std::vector<real_type> initial_Ev2;
    std::vector<real_type> initial_Is;
    real_type initial_iter;
    std::vector<real_type> initial_Iv1;
    std::vector<real_type> initial_Iv2;
    std::vector<real_type> initial_M;
    std::vector<real_type> initial_new_IS;
    std::vector<real_type> initial_new_IV1;
    real_type initial_new_Iv1_tot;
    std::vector<real_type> initial_new_IV2;
    real_type initial_new_Iv2_tot;
    std::vector<real_type> initial_R;
    std::vector<real_type> initial_RV1;
    std::vector<real_type> initial_RV2;
    std::vector<real_type> initial_S;
    real_type initial_time;
    std::vector<real_type> initial_V1;
    std::vector<real_type> initial_V1p;
    std::vector<real_type> initial_V2;
    std::vector<real_type> initial_V2p;
    std::vector<real_type> Is_init;
    std::vector<real_type> Iv1_init;
    std::vector<real_type> Iv2_init;
    int len_ageing;
    std::vector<real_type> m;
    std::vector<real_type> mean_import;
    int N_age;
    int N_reg;
    int N_time;
    int offset_variable_Es;
    int offset_variable_Ev1;
    int offset_variable_Ev2;
    int offset_variable_Is;
    int offset_variable_Iv1;
    int offset_variable_Iv2;
    int offset_variable_M;
    int offset_variable_new_IS;
    int offset_variable_new_IV1;
    int offset_variable_new_IV2;
    int offset_variable_R;
    int offset_variable_RV1;
    int offset_variable_RV2;
    int offset_variable_V1;
    int offset_variable_V1p;
    int offset_variable_V2;
    int offset_variable_V2p;
    real_type p_EI;
    real_type p_IR;
    std::vector<real_type> p_MS;
    std::vector<real_type> recov;
    std::vector<real_type> S_init;
    real_type theta;
    real_type v_fail;
    real_type v_leak;
    real_type v_sec;
    std::vector<real_type> V1_init;
    std::vector<real_type> V2_init;
    real_type vacc;
    real_type waning;
    real_type X;
    real_type X_import;
    real_type Y;
    real_type Y_import;
    std::vector<real_type> year_per_age;
    real_type year_start;
  };
  struct internal_type {
    std::vector<real_type> cases_ij;
    std::vector<real_type> cases_ijkl;
    std::vector<real_type> d_a;
    std::vector<real_type> import_t;
    std::vector<real_type> lambda;
    std::vector<real_type> lambda_t;
    std::vector<real_type> mean_R;
    std::vector<real_type> mean_RV1;
    std::vector<real_type> mean_RV2;
    std::vector<real_type> mean_S;
    std::vector<real_type> mean_V1;
    std::vector<real_type> mean_V1p;
    std::vector<real_type> mean_V2;
    std::vector<real_type> mean_V2p;
    std::vector<real_type> N_ageing_S;
    std::vector<real_type> N_ageing_V1;
    std::vector<real_type> N_ageing_V2;
    std::vector<real_type> n_EsIs;
    std::vector<real_type> n_Ev12v2;
    std::vector<real_type> n_Ev1Iv1;
    std::vector<real_type> n_IsR;
    std::vector<real_type> n_Iv1R;
    std::vector<real_type> n_Iv2R;
    std::vector<real_type> n_MS;
    std::vector<real_type> n_R;
    std::vector<real_type> n_RR;
    std::vector<real_type> n_RRV1;
    std::vector<real_type> n_RV1;
    std::vector<real_type> n_RV1RV1;
    std::vector<real_type> n_RV1RV2;
    std::vector<real_type> n_RV2RV2;
    std::vector<real_type> n_S;
    std::vector<real_type> n_SEs;
    std::vector<real_type> n_SS;
    std::vector<real_type> N_strat;
    std::vector<real_type> n_SV1;
    std::vector<real_type> n_SV1p;
    std::vector<real_type> n_SVtot;
    std::vector<real_type> n_V1;
    std::vector<real_type> n_v1E;
    std::vector<real_type> n_V1p;
    std::vector<real_type> n_v1pE;
    std::vector<real_type> n_V1pV1p;
    std::vector<real_type> n_V1pV2p;
    std::vector<real_type> n_V1V1;
    std::vector<real_type> n_V1V2;
    std::vector<real_type> n_V1V2p;
    std::vector<real_type> n_V1V2tot;
    std::vector<real_type> n_v2E;
    std::vector<real_type> n_v2pE;
    std::vector<real_type> n_V2pV2p;
    std::vector<real_type> n_V2V2;
    std::vector<real_type> new_birth;
    std::vector<real_type> p_SE;
    std::vector<real_type> p_SEv1;
    std::vector<real_type> p_SEv2;
    std::vector<real_type> pop_per_age_s;
    std::vector<real_type> pop_per_age_v1;
    std::vector<real_type> pop_per_age_v2;
    std::vector<real_type> prop_after_change;
    std::vector<real_type> prop_v1;
    std::vector<real_type> prop_v1v2;
    std::vector<real_type> v2;
  };
  seirv_age_region(const dust::pars_type<seirv_age_region>& pars) :
    shared(pars.shared), internal(pars.internal) {
  }
  size_t size() const {
    return shared->dim_Es + shared->dim_Ev1 + shared->dim_Ev2 + shared->dim_Is + shared->dim_Iv1 + shared->dim_Iv2 + shared->dim_M + shared->dim_new_IS + shared->dim_new_IV1 + shared->dim_new_IV2 + shared->dim_R + shared->dim_RV1 + shared->dim_RV2 + shared->dim_S + shared->dim_V1 + shared->dim_V1p + shared->dim_V2 + shared->dim_V2p + 4;
  }
  std::vector<real_type> initial(size_t step, rng_state_type& rng_state) {
    std::vector<real_type> state(shared->dim_Es + shared->dim_Ev1 + shared->dim_Ev2 + shared->dim_Is + shared->dim_Iv1 + shared->dim_Iv2 + shared->dim_M + shared->dim_new_IS + shared->dim_new_IV1 + shared->dim_new_IV2 + shared->dim_R + shared->dim_RV1 + shared->dim_RV2 + shared->dim_S + shared->dim_V1 + shared->dim_V1p + shared->dim_V2 + shared->dim_V2p + 4);
    state[0] = shared->initial_time;
    state[1] = shared->initial_iter;
    state[2] = shared->initial_new_Iv1_tot;
    state[3] = shared->initial_new_Iv2_tot;
    std::copy(shared->initial_S.begin(), shared->initial_S.end(), state.begin() + 4);
    std::copy(shared->initial_M.begin(), shared->initial_M.end(), state.begin() + shared->offset_variable_M);
    std::copy(shared->initial_V1.begin(), shared->initial_V1.end(), state.begin() + shared->offset_variable_V1);
    std::copy(shared->initial_V2.begin(), shared->initial_V2.end(), state.begin() + shared->offset_variable_V2);
    std::copy(shared->initial_V1p.begin(), shared->initial_V1p.end(), state.begin() + shared->offset_variable_V1p);
    std::copy(shared->initial_V2p.begin(), shared->initial_V2p.end(), state.begin() + shared->offset_variable_V2p);
    std::copy(shared->initial_R.begin(), shared->initial_R.end(), state.begin() + shared->offset_variable_R);
    std::copy(shared->initial_RV1.begin(), shared->initial_RV1.end(), state.begin() + shared->offset_variable_RV1);
    std::copy(shared->initial_RV2.begin(), shared->initial_RV2.end(), state.begin() + shared->offset_variable_RV2);
    std::copy(shared->initial_Es.begin(), shared->initial_Es.end(), state.begin() + shared->offset_variable_Es);
    std::copy(shared->initial_Ev1.begin(), shared->initial_Ev1.end(), state.begin() + shared->offset_variable_Ev1);
    std::copy(shared->initial_Ev2.begin(), shared->initial_Ev2.end(), state.begin() + shared->offset_variable_Ev2);
    std::copy(shared->initial_Is.begin(), shared->initial_Is.end(), state.begin() + shared->offset_variable_Is);
    std::copy(shared->initial_Iv1.begin(), shared->initial_Iv1.end(), state.begin() + shared->offset_variable_Iv1);
    std::copy(shared->initial_Iv2.begin(), shared->initial_Iv2.end(), state.begin() + shared->offset_variable_Iv2);
    std::copy(shared->initial_new_IS.begin(), shared->initial_new_IS.end(), state.begin() + shared->offset_variable_new_IS);
    std::copy(shared->initial_new_IV1.begin(), shared->initial_new_IV1.end(), state.begin() + shared->offset_variable_new_IV1);
    std::copy(shared->initial_new_IV2.begin(), shared->initial_new_IV2.end(), state.begin() + shared->offset_variable_new_IV2);
    return state;
  }
  void update(size_t step, const real_type * state, rng_state_type& rng_state, real_type * state_next) {
    const real_type * M = state + shared->offset_variable_M;
    const real_type * S = state + 4;
    const real_type * V1 = state + shared->offset_variable_V1;
    const real_type * V2 = state + shared->offset_variable_V2;
    const real_type * V1p = state + shared->offset_variable_V1p;
    const real_type * V2p = state + shared->offset_variable_V2p;
    const real_type * Es = state + shared->offset_variable_Es;
    const real_type * Ev1 = state + shared->offset_variable_Ev1;
    const real_type * Ev2 = state + shared->offset_variable_Ev2;
    const real_type * Is = state + shared->offset_variable_Is;
    const real_type * Iv1 = state + shared->offset_variable_Iv1;
    const real_type * Iv2 = state + shared->offset_variable_Iv2;
    const real_type * R = state + shared->offset_variable_R;
    const real_type * RV1 = state + shared->offset_variable_RV1;
    const real_type * RV2 = state + shared->offset_variable_RV2;
    const real_type time = state[0];
    const real_type iter = state[1];
    real_type curr_year = shared->year_start + dust::math::trunc(step / (real_type) 365);
    real_type row_number = dust::math::trunc(1 + (time / (real_type) static_cast<real_type>(365.25)));
    state_next[1] = step + 1;
    state_next[0] = (step + 1) * shared->dt;
    real_type N = odin_sum2<real_type>(S, 0, shared->dim_S_1, 0, shared->dim_S_2, shared->dim_S_1) + odin_sum2<real_type>(M, 0, shared->dim_M_1, 0, shared->dim_M_2, shared->dim_M_1) + odin_sum2<real_type>(V1, 0, shared->dim_V1_1, 0, shared->dim_V1_2, shared->dim_V1_1) + odin_sum2<real_type>(V2, 0, shared->dim_V2_1, 0, shared->dim_V2_2, shared->dim_V2_1) + odin_sum2<real_type>(V1p, 0, shared->dim_V1p_1, 0, shared->dim_V1p_2, shared->dim_V1p_1) + odin_sum2<real_type>(V2p, 0, shared->dim_V2p_1, 0, shared->dim_V2p_2, shared->dim_V2p_1) + odin_sum2<real_type>(Es, 0, shared->dim_Es_1, 0, shared->dim_Es_2, shared->dim_Es_1) + odin_sum2<real_type>(Ev1, 0, shared->dim_Ev1_1, 0, shared->dim_Ev1_2, shared->dim_Ev1_1) + odin_sum2<real_type>(Ev2, 0, shared->dim_Ev2_1, 0, shared->dim_Ev2_2, shared->dim_Ev2_1) + odin_sum2<real_type>(Is, 0, shared->dim_Is_1, 0, shared->dim_Is_2, shared->dim_Is_1) + odin_sum2<real_type>(Iv1, 0, shared->dim_Iv1_1, 0, shared->dim_Iv1_2, shared->dim_Iv1_1) + odin_sum2<real_type>(Iv2, 0, shared->dim_Iv2_1, 0, shared->dim_Iv2_2, shared->dim_Iv2_1) + odin_sum2<real_type>(R, 0, shared->dim_R_1, 0, shared->dim_R_2, shared->dim_R_1) + odin_sum2<real_type>(RV1, 0, shared->dim_RV1_1, 0, shared->dim_RV1_2, shared->dim_RV1_1) + odin_sum2<real_type>(RV2, 0, shared->dim_RV2_1, 0, shared->dim_RV2_2, shared->dim_RV2_1);
    for (int i = 1; i <= shared->dim_prop_after_change; ++i) {
      internal.prop_after_change[i - 1] = (shared->waning == 3 && (odin_sum1<real_type>(shared->year_per_age.data(), 0, i - 1) + 1) > (curr_year - 2006) ? 0 : (shared->waning == 3 && odin_sum1<real_type>(shared->year_per_age.data(), 0, i) <= (curr_year - 2006) ? 2 : (shared->waning == 3 ? (curr_year - 2006 - odin_sum1<real_type>(shared->year_per_age.data(), 0, i - 1)) / (real_type) shared->year_per_age[i - 1] : 0)));
    }
    for (int i = 1; i <= shared->dim_n_EsIs_1; ++i) {
      for (int j = 1; j <= shared->dim_n_EsIs_2; ++j) {
        internal.n_EsIs[i - 1 + shared->dim_n_EsIs_1 * (j - 1)] = dust::random::binomial<real_type>(rng_state, Es[shared->dim_Es_1 * (j - 1) + i - 1], shared->p_EI);
      }
    }
    for (int i = 1; i <= shared->dim_n_Ev12v2_1; ++i) {
      for (int j = 1; j <= shared->dim_n_Ev12v2_2; ++j) {
        internal.n_Ev12v2[i - 1 + shared->dim_n_Ev12v2_1 * (j - 1)] = dust::random::binomial<real_type>(rng_state, Ev2[shared->dim_Ev2_1 * (j - 1) + i - 1], shared->p_EI);
      }
    }
    for (int i = 1; i <= shared->dim_n_Ev1Iv1_1; ++i) {
      for (int j = 1; j <= shared->dim_n_Ev1Iv1_2; ++j) {
        internal.n_Ev1Iv1[i - 1 + shared->dim_n_Ev1Iv1_1 * (j - 1)] = dust::random::binomial<real_type>(rng_state, Ev1[shared->dim_Ev1_1 * (j - 1) + i - 1], shared->p_EI);
      }
    }
    for (int i = 1; i <= shared->dim_n_IsR_1; ++i) {
      for (int j = 1; j <= shared->dim_n_IsR_2; ++j) {
        internal.n_IsR[i - 1 + shared->dim_n_IsR_1 * (j - 1)] = dust::random::binomial<real_type>(rng_state, Is[shared->dim_Is_1 * (j - 1) + i - 1], shared->p_IR);
      }
    }
    for (int i = 1; i <= shared->dim_n_Iv1R_1; ++i) {
      for (int j = 1; j <= shared->dim_n_Iv1R_2; ++j) {
        internal.n_Iv1R[i - 1 + shared->dim_n_Iv1R_1 * (j - 1)] = dust::random::binomial<real_type>(rng_state, Iv1[shared->dim_Iv1_1 * (j - 1) + i - 1], shared->p_IR);
      }
    }
    for (int i = 1; i <= shared->dim_n_Iv2R_1; ++i) {
      for (int j = 1; j <= shared->dim_n_Iv2R_2; ++j) {
        internal.n_Iv2R[i - 1 + shared->dim_n_Iv2R_1 * (j - 1)] = dust::random::binomial<real_type>(rng_state, Iv2[shared->dim_Iv2_1 * (j - 1) + i - 1], shared->p_IR);
      }
    }
    for (int i = 1; i <= shared->dim_n_MS; ++i) {
      internal.n_MS[i - 1] = dust::random::binomial<real_type>(rng_state, M[shared->dim_M_1 * (i - 1) + 0], shared->p_MS[i - 1]);
    }
    for (int i = 1; i <= shared->dim_N_strat_1; ++i) {
      for (int j = 1; j <= shared->dim_N_strat_2; ++j) {
        internal.N_strat[i - 1 + shared->dim_N_strat_1 * (j - 1)] = S[shared->dim_S_1 * (j - 1) + i - 1] + M[shared->dim_M_1 * (j - 1) + i - 1] + V1[shared->dim_V1_1 * (j - 1) + i - 1] + V2[shared->dim_V2_1 * (j - 1) + i - 1] + V1p[shared->dim_V1p_1 * (j - 1) + i - 1] + V2p[shared->dim_V2p_1 * (j - 1) + i - 1] + Es[shared->dim_Es_1 * (j - 1) + i - 1] + Ev1[shared->dim_Ev1_1 * (j - 1) + i - 1] + Ev2[shared->dim_Ev2_1 * (j - 1) + i - 1] + Is[shared->dim_Is_1 * (j - 1) + i - 1] + Iv1[shared->dim_Iv1_1 * (j - 1) + i - 1] + Iv2[shared->dim_Iv2_1 * (j - 1) + i - 1] + R[shared->dim_R_1 * (j - 1) + i - 1] + RV1[shared->dim_RV1_1 * (j - 1) + i - 1] + RV2[shared->dim_RV2_1 * (j - 1) + i - 1];
      }
    }
    for (int i = 1; i <= shared->dim_new_birth; ++i) {
      internal.new_birth[i - 1] = dust::random::poisson<real_type>(rng_state, shared->array_new[shared->dim_array_new_1 * (iter - 1) + i - 1]);
    }
    for (int i = 1; i <= shared->dim_pop_per_age_s_1; ++i) {
      for (int j = 1; j <= shared->dim_pop_per_age_s_2; ++j) {
        internal.pop_per_age_s[i - 1 + shared->dim_pop_per_age_s_1 * (j - 1)] = (S[shared->dim_S_1 * (j - 1) + i - 1] + Es[shared->dim_Es_1 * (j - 1) + i - 1] + Is[shared->dim_Is_1 * (j - 1) + i - 1] + R[shared->dim_R_1 * (j - 1) + i - 1]);
      }
    }
    for (int i = 1; i <= shared->dim_pop_per_age_v1_1; ++i) {
      for (int j = 1; j <= shared->dim_pop_per_age_v1_2; ++j) {
        internal.pop_per_age_v1[i - 1 + shared->dim_pop_per_age_v1_1 * (j - 1)] = (V1[shared->dim_V1_1 * (j - 1) + i - 1] + Ev1[shared->dim_Ev1_1 * (j - 1) + i - 1] + Iv1[shared->dim_Iv1_1 * (j - 1) + i - 1] + RV1[shared->dim_RV1_1 * (j - 1) + i - 1] + V1p[shared->dim_V1p_1 * (j - 1) + i - 1]);
      }
    }
    for (int i = 1; i <= shared->dim_pop_per_age_v2_1; ++i) {
      for (int j = 1; j <= shared->dim_pop_per_age_v2_2; ++j) {
        internal.pop_per_age_v2[i - 1 + shared->dim_pop_per_age_v2_1 * (j - 1)] = (V2[shared->dim_V2_1 * (j - 1) + i - 1] + Ev2[shared->dim_Ev2_1 * (j - 1) + i - 1] + Iv2[shared->dim_Iv2_1 * (j - 1) + i - 1] + RV2[shared->dim_RV2_1 * (j - 1) + i - 1] + V2p[shared->dim_V2p_1 * (j - 1) + i - 1]);
      }
    }
    for (int i = 1; i <= shared->dim_v2; ++i) {
      internal.v2[i - 1] = (shared->v_leak == 0 || (odin_sum1<real_type>(shared->year_per_age.data(), 0, i) <= (5 - internal.prop_after_change[i - 1])) ? shared->v_sec : (shared->waning == 1 ? shared->v_sec + shared->v_leak * ((odin_sum1<real_type>(shared->year_per_age.data(), 0, i - 1) + shared->year_per_age[i - 1] / (real_type) 2) - 5) : (shared->waning == 2 ? shared->v_sec + shared->v_leak * (dust::math::min((odin_sum1<real_type>(shared->year_per_age.data(), 0, i - 1) + shared->year_per_age[i - 1] / (real_type) 2) - 5, curr_year - 2000)) : (shared->waning == 3 ? shared->v_sec + shared->v_leak * ((odin_sum1<real_type>(shared->year_per_age.data(), 0, i - 1) + shared->year_per_age[i - 1] / (real_type) 2) - (5 - 2 * internal.prop_after_change[i - 1])) : shared->v_sec))));
    }
    for (int i = 1; i <= shared->dim_d_a_1; ++i) {
      for (int j = 1; j <= shared->dim_d_a_2; ++j) {
        internal.d_a[i - 1 + shared->dim_d_a_1 * (j - 1)] = (i == j ? 1 : (dust::math::pow<real_type>(odin_sum2<real_type>(internal.N_strat.data(), 0, shared->dim_N_strat_1, j - 1, j, shared->dim_N_strat_1), shared->b)) * (shared->theta * (dust::math::pow<real_type>((shared->d[shared->dim_d_1 * (j - 1) + i - 1] - 1), (- 1))) * dust::math::pow<real_type>(odin_sum2<real_type>(internal.N_strat.data(), 0, shared->dim_N_strat_1, i - 1, i, shared->dim_N_strat_1), shared->c)) / (real_type) odin_sum2<real_type>(internal.N_strat.data(), 0, shared->dim_N_strat_1, i - 1, i, shared->dim_N_strat_1));
      }
    }
    for (int i = 1; i <= shared->dim_import_t_1; ++i) {
      for (int j = 1; j <= shared->dim_import_t_2; ++j) {
        internal.import_t[i - 1 + shared->dim_import_t_1 * (j - 1)] = dust::random::poisson<real_type>(rng_state, shared->mean_import[shared->dim_mean_import_1 * (j - 1) + row_number - 1] * (12 * internal.N_strat[shared->dim_N_strat_1 * (j - 1) + i - 1]) / (real_type) odin_sum2<real_type>(internal.N_strat.data(), 0, shared->dim_N_strat_1, j - 1, j, shared->dim_N_strat_1) * (1 + shared->X_import * dust::math::cos(2 * static_cast<real_type>(3.1415899999999999) * time / (real_type) static_cast<real_type>(365.25) + shared->Y_import)));
      }
    }
    for (int i = 1; i <= shared->dim_N_ageing_S_1; ++i) {
      for (int j = 1; j <= shared->dim_N_ageing_S_2; ++j) {
        internal.N_ageing_S[i - 1 + shared->dim_N_ageing_S_1 * (j - 1)] = (fmodr<real_type>(iter, 365) == 1 && i != 1 ? (internal.pop_per_age_s[shared->dim_pop_per_age_s_1 * (j - 1) + i - 1]) / (real_type) (shared->year_per_age[i - 1] * 365) : (fmodr<real_type>(iter, 365) == 1 && i == 1 ? (internal.pop_per_age_s[shared->dim_pop_per_age_s_1 * (j - 1) + i - 1]) / (real_type) (shared->year_per_age[i - 1] * 365) / (real_type) (1 - 1 / (real_type) (shared->delta * 365)) : internal.N_ageing_S[shared->dim_N_ageing_S_1 * (j - 1) + i - 1]));
      }
    }
    for (int i = 1; i <= shared->dim_N_ageing_V1_1; ++i) {
      for (int j = 1; j <= shared->dim_N_ageing_V1_2; ++j) {
        internal.N_ageing_V1[i - 1 + shared->dim_N_ageing_V1_1 * (j - 1)] = (fmodr<real_type>(iter, 365) == 1 ? (internal.pop_per_age_v1[shared->dim_pop_per_age_v1_1 * (j - 1) + i - 1]) / (real_type) (shared->year_per_age[i - 1] * 365) : internal.N_ageing_V1[shared->dim_N_ageing_V1_1 * (j - 1) + i - 1]);
      }
    }
    for (int i = 1; i <= shared->dim_N_ageing_V2_1; ++i) {
      for (int j = 1; j <= shared->dim_N_ageing_V2_2; ++j) {
        internal.N_ageing_V2[i - 1 + shared->dim_N_ageing_V2_1 * (j - 1)] = (fmodr<real_type>(iter, 365) == 1 ? (internal.pop_per_age_v2[shared->dim_pop_per_age_v2_1 * (j - 1) + i - 1]) / (real_type) (shared->year_per_age[i - 1] * 365) : internal.N_ageing_V2[shared->dim_N_ageing_V2_1 * (j - 1) + i - 1]);
      }
    }
    for (int i = 1; i <= shared->len_ageing; ++i) {
      for (int j = 1; j <= shared->dim_prop_v1_2; ++j) {
        internal.prop_v1[i - 1 + shared->dim_prop_v1_1 * (j - 1)] = (iter == 1 || i == 1 ? shared->array_cov1[shared->dim_array_cov1_12 * (iter - 1) + shared->dim_array_cov1_1 * (j - 1) + i - 1] : (iter <= 365 ? (1 - (1 - shared->array_cov1[shared->dim_array_cov1_12 * (iter - 1) + shared->dim_array_cov1_1 * (j - 1) + i - 1] - shared->array_cov2[shared->dim_array_cov2_12 * (iter - 1) + shared->dim_array_cov2_1 * (j - 1) + i - 1]) / (real_type) (1 - shared->array_cov1[shared->dim_array_cov1_12 * 0 + shared->dim_array_cov1_1 * (j - 1) + i - 1 - 1] - shared->array_cov2[shared->dim_array_cov2_12 * 0 + shared->dim_array_cov2_1 * (j - 1) + i - 1 - 1])) : (1 - (1 - shared->array_cov1[shared->dim_array_cov1_12 * (iter - 1) + shared->dim_array_cov1_1 * (j - 1) + i - 1] - shared->array_cov2[shared->dim_array_cov2_12 * (iter - 1) + shared->dim_array_cov2_1 * (j - 1) + i - 1]) / (real_type) (1 - shared->array_cov1[shared->dim_array_cov1_12 * (iter - 365 - 1) + shared->dim_array_cov1_1 * (j - 1) + i - 1 - 1] - shared->array_cov2[shared->dim_array_cov2_12 * (iter - 365 - 1) + shared->dim_array_cov2_1 * (j - 1) + i - 1 - 1]))));
      }
    }
    for (int i = 1; i <= shared->dim_prop_v1_1; ++i) {
      for (int j = 1; j <= shared->dim_prop_v1_2; ++j) {
        internal.prop_v1[i - 1 + shared->dim_prop_v1_1 * (j - 1)] = (internal.prop_v1[shared->dim_prop_v1_1 * (j - 1) + i - 1] < 0 ? 0 : (internal.prop_v1[shared->dim_prop_v1_1 * (j - 1) + i - 1] > 1 ? 1 : internal.prop_v1[shared->dim_prop_v1_1 * (j - 1) + i - 1]));
      }
    }
    for (int i = 1; i <= shared->len_ageing; ++i) {
      for (int j = 1; j <= shared->dim_prop_v1v2_2; ++j) {
        internal.prop_v1v2[i - 1 + shared->dim_prop_v1v2_1 * (j - 1)] = (iter == 1 || i == 1 ? 0 : (iter <= 365 ? (shared->array_cov2[shared->dim_array_cov2_12 * (iter - 1) + shared->dim_array_cov2_1 * (j - 1) + i - 1] - shared->array_cov2[shared->dim_array_cov2_12 * 0 + shared->dim_array_cov2_1 * (j - 1) + i - 1 - 1]) / (real_type) (shared->array_cov1[shared->dim_array_cov1_12 * 0 + shared->dim_array_cov1_1 * (j - 1) + i - 1 - 1]) : (shared->array_cov2[shared->dim_array_cov2_12 * (iter - 1) + shared->dim_array_cov2_1 * (j - 1) + i - 1] - shared->array_cov2[shared->dim_array_cov2_12 * (iter - 365 - 1) + shared->dim_array_cov2_1 * (j - 1) + i - 1 - 1]) / (real_type) (shared->array_cov1[shared->dim_array_cov1_12 * (iter - 365 - 1) + shared->dim_array_cov1_1 * (j - 1) + i - 1 - 1])));
      }
    }
    for (int i = 1; i <= shared->len_ageing; ++i) {
      for (int j = 1; j <= shared->dim_prop_v1v2_2; ++j) {
        internal.prop_v1v2[i - 1 + shared->dim_prop_v1v2_1 * (j - 1)] = (iter <= 365 && i >= 1 && shared->array_cov1[shared->dim_array_cov1_12 * 0 + shared->dim_array_cov1_1 * (j - 1) + i - 1 - 1] == 0 ? 0 : (iter > 365 && i >= 1 && shared->array_cov1[shared->dim_array_cov1_12 * (iter - 365 - 1) + shared->dim_array_cov1_1 * (j - 1) + i - 1 - 1] == 0 ? 0 : internal.prop_v1v2[shared->dim_prop_v1v2_1 * (j - 1) + i - 1]));
      }
    }
    for (int i = 1; i <= shared->dim_prop_v1v2_1; ++i) {
      for (int j = 1; j <= shared->dim_prop_v1v2_2; ++j) {
        internal.prop_v1v2[i - 1 + shared->dim_prop_v1v2_1 * (j - 1)] = (internal.prop_v1v2[shared->dim_prop_v1v2_1 * (j - 1) + i - 1] < 0 ? 0 : (internal.prop_v1v2[shared->dim_prop_v1v2_1 * (j - 1) + i - 1] > 1 ? 1 : internal.prop_v1v2[shared->dim_prop_v1v2_1 * (j - 1) + i - 1]));
      }
    }
    for (int i = 1; i <= shared->dim_Iv1_1; ++i) {
      for (int j = 1; j <= shared->dim_Iv1_2; ++j) {
        state_next[shared->offset_variable_Iv1 + i - 1 + shared->dim_Iv1_1 * (j - 1)] = Iv1[shared->dim_Iv1_1 * (j - 1) + i - 1] + internal.n_Ev1Iv1[shared->dim_n_Ev1Iv1_1 * (j - 1) + i - 1] - internal.n_Iv1R[shared->dim_n_Iv1R_1 * (j - 1) + i - 1];
      }
    }
    for (int i = 1; i <= shared->dim_Iv2_1; ++i) {
      for (int j = 1; j <= shared->dim_Iv2_2; ++j) {
        state_next[shared->offset_variable_Iv2 + i - 1 + shared->dim_Iv2_1 * (j - 1)] = Iv2[shared->dim_Iv2_1 * (j - 1) + i - 1] + internal.n_Ev12v2[shared->dim_n_Ev12v2_1 * (j - 1) + i - 1] - internal.n_Iv2R[shared->dim_n_Iv2R_1 * (j - 1) + i - 1];
      }
    }
    {
       int i = 1;
       for (int j = 1; j <= shared->dim_M_2; ++j) {
         state_next[shared->offset_variable_M + i - 1 + shared->dim_M_1 * (j - 1)] = M[shared->dim_M_1 * (j - 1) + 0] + internal.new_birth[j - 1] - internal.n_MS[j - 1];
       }
    }
    for (int i = 1; i <= shared->dim_new_IS_1; ++i) {
      for (int j = 1; j <= shared->dim_new_IS_2; ++j) {
        state_next[shared->offset_variable_new_IS + i - 1 + shared->dim_new_IS_1 * (j - 1)] = internal.n_EsIs[shared->dim_n_EsIs_1 * (j - 1) + i - 1];
      }
    }
    for (int i = 1; i <= shared->dim_new_IV1_1; ++i) {
      for (int j = 1; j <= shared->dim_new_IV1_2; ++j) {
        state_next[shared->offset_variable_new_IV1 + i - 1 + shared->dim_new_IV1_1 * (j - 1)] = internal.n_Ev1Iv1[shared->dim_n_Ev1Iv1_1 * (j - 1) + i - 1];
      }
    }
    state_next[2] = odin_sum2<real_type>(internal.n_Ev1Iv1.data(), 0, shared->dim_n_Ev1Iv1_1, 0, shared->dim_n_Ev1Iv1_2, shared->dim_n_Ev1Iv1_1);
    for (int i = 1; i <= shared->dim_new_IV2_1; ++i) {
      for (int j = 1; j <= shared->dim_new_IV2_2; ++j) {
        state_next[shared->offset_variable_new_IV2 + i - 1 + shared->dim_new_IV2_1 * (j - 1)] = internal.n_Ev12v2[shared->dim_n_Ev12v2_1 * (j - 1) + i - 1];
      }
    }
    state_next[3] = odin_sum2<real_type>(internal.n_Ev12v2.data(), 0, shared->dim_n_Ev12v2_1, 0, shared->dim_n_Ev12v2_2, shared->dim_n_Ev12v2_1);
    for (int i = 1; i <= shared->dim_cases_ijkl_1; ++i) {
      for (int j = 1; j <= shared->dim_cases_ijkl_2; ++j) {
        for (int k = 1; k <= shared->dim_cases_ijkl_3; ++k) {
          for (int l = 1; l <= shared->dim_cases_ijkl_4; ++l) {
            internal.cases_ijkl[i - 1 + shared->dim_cases_ijkl_1 * (j - 1) + shared->dim_cases_ijkl_12 * (k - 1) + shared->dim_cases_ijkl_123 * (l - 1)] = shared->m[shared->dim_m_1 * (k - 1) + i - 1] * internal.d_a[shared->dim_d_a_1 * (l - 1) + j - 1] * (Is[shared->dim_Is_1 * (j - 1) + i - 1] + shared->vacc * Iv1[shared->dim_Iv1_1 * (j - 1) + i - 1] + shared->vacc * Iv2[shared->dim_Iv2_1 * (j - 1) + i - 1]);
          }
        }
      }
    }
    for (int i = 1; i <= shared->dim_mean_R_1; ++i) {
      for (int j = 1; j <= shared->dim_mean_R_2; ++j) {
        internal.mean_R[i - 1 + shared->dim_mean_R_1 * (j - 1)] = (internal.pop_per_age_s[shared->dim_pop_per_age_s_1 * (j - 1) + i - 1] > 0 ? internal.N_ageing_S[shared->dim_N_ageing_S_1 * (j - 1) + i - 1] * (R[shared->dim_R_1 * (j - 1) + i - 1] / (real_type) (internal.pop_per_age_s[shared->dim_pop_per_age_s_1 * (j - 1) + i - 1])) : 0);
      }
    }
    for (int i = 1; i <= shared->dim_mean_RV1_1; ++i) {
      for (int j = 1; j <= shared->dim_mean_RV1_2; ++j) {
        internal.mean_RV1[i - 1 + shared->dim_mean_RV1_1 * (j - 1)] = (internal.pop_per_age_v1[shared->dim_pop_per_age_v1_1 * (j - 1) + i - 1] > 0 ? internal.N_ageing_V1[shared->dim_N_ageing_V1_1 * (j - 1) + i - 1] * (RV1[shared->dim_RV1_1 * (j - 1) + i - 1] / (real_type) (internal.pop_per_age_v1[shared->dim_pop_per_age_v1_1 * (j - 1) + i - 1])) : 0);
      }
    }
    for (int i = 1; i <= shared->dim_mean_RV2_1; ++i) {
      for (int j = 1; j <= shared->dim_mean_RV2_2; ++j) {
        internal.mean_RV2[i - 1 + shared->dim_mean_RV2_1 * (j - 1)] = (internal.pop_per_age_v2[shared->dim_pop_per_age_v2_1 * (j - 1) + i - 1] > 0 ? internal.N_ageing_V2[shared->dim_N_ageing_V2_1 * (j - 1) + i - 1] * (RV2[shared->dim_RV2_1 * (j - 1) + i - 1] / (real_type) (internal.pop_per_age_v2[shared->dim_pop_per_age_v2_1 * (j - 1) + i - 1])) : 0);
      }
    }
    for (int i = 1; i <= shared->dim_mean_S_1; ++i) {
      for (int j = 1; j <= shared->dim_mean_S_2; ++j) {
        internal.mean_S[i - 1 + shared->dim_mean_S_1 * (j - 1)] = (internal.pop_per_age_s[shared->dim_pop_per_age_s_1 * (j - 1) + i - 1] > 0 ? internal.N_ageing_S[shared->dim_N_ageing_S_1 * (j - 1) + i - 1] * (S[shared->dim_S_1 * (j - 1) + i - 1] / (real_type) (internal.pop_per_age_s[shared->dim_pop_per_age_s_1 * (j - 1) + i - 1])) : 0);
      }
    }
    for (int i = 1; i <= shared->dim_mean_V1_1; ++i) {
      for (int j = 1; j <= shared->dim_mean_V1_2; ++j) {
        internal.mean_V1[i - 1 + shared->dim_mean_V1_1 * (j - 1)] = (internal.pop_per_age_v1[shared->dim_pop_per_age_v1_1 * (j - 1) + i - 1] > 0 ? internal.N_ageing_V1[shared->dim_N_ageing_V1_1 * (j - 1) + i - 1] * (V1[shared->dim_V1_1 * (j - 1) + i - 1] / (real_type) (internal.pop_per_age_v1[shared->dim_pop_per_age_v1_1 * (j - 1) + i - 1])) : 0);
      }
    }
    for (int i = 1; i <= shared->dim_mean_V1p_1; ++i) {
      for (int j = 1; j <= shared->dim_mean_V1p_2; ++j) {
        internal.mean_V1p[i - 1 + shared->dim_mean_V1p_1 * (j - 1)] = (internal.pop_per_age_v1[shared->dim_pop_per_age_v1_1 * (j - 1) + i - 1] > 0 ? internal.N_ageing_V1[shared->dim_N_ageing_V1_1 * (j - 1) + i - 1] * (V1p[shared->dim_V1p_1 * (j - 1) + i - 1] / (real_type) (internal.pop_per_age_v1[shared->dim_pop_per_age_v1_1 * (j - 1) + i - 1])) : 0);
      }
    }
    for (int i = 1; i <= shared->dim_mean_V2_1; ++i) {
      for (int j = 1; j <= shared->dim_mean_V2_2; ++j) {
        internal.mean_V2[i - 1 + shared->dim_mean_V2_1 * (j - 1)] = (internal.pop_per_age_v2[shared->dim_pop_per_age_v2_1 * (j - 1) + i - 1] > 0 ? internal.N_ageing_V2[shared->dim_N_ageing_V2_1 * (j - 1) + i - 1] * (V2[shared->dim_V2_1 * (j - 1) + i - 1] / (real_type) (internal.pop_per_age_v2[shared->dim_pop_per_age_v2_1 * (j - 1) + i - 1])) : 0);
      }
    }
    for (int i = 1; i <= shared->dim_mean_V2p_1; ++i) {
      for (int j = 1; j <= shared->dim_mean_V2p_2; ++j) {
        internal.mean_V2p[i - 1 + shared->dim_mean_V2p_1 * (j - 1)] = (internal.pop_per_age_v2[shared->dim_pop_per_age_v2_1 * (j - 1) + i - 1] > 0 ? internal.N_ageing_V2[shared->dim_N_ageing_V2_1 * (j - 1) + i - 1] * (V2p[shared->dim_V2p_1 * (j - 1) + i - 1] / (real_type) (internal.pop_per_age_v2[shared->dim_pop_per_age_v2_1 * (j - 1) + i - 1])) : 0);
      }
    }
    for (int i = 1; i <= shared->dim_Is_1; ++i) {
      for (int j = 1; j <= shared->dim_Is_2; ++j) {
        state_next[shared->offset_variable_Is + i - 1 + shared->dim_Is_1 * (j - 1)] = Is[shared->dim_Is_1 * (j - 1) + i - 1] + internal.n_EsIs[shared->dim_n_EsIs_1 * (j - 1) + i - 1] + internal.import_t[shared->dim_import_t_1 * (j - 1) + i - 1] - internal.n_IsR[shared->dim_n_IsR_1 * (j - 1) + i - 1];
      }
    }
    for (int i = 1; i <= shared->dim_cases_ij_1; ++i) {
      for (int j = 1; j <= shared->dim_cases_ij_2; ++j) {
        internal.cases_ij[i - 1 + shared->dim_cases_ij_1 * (j - 1)] = odin_sum4<real_type>(internal.cases_ijkl.data(), 0, shared->dim_cases_ijkl_1, 0, shared->dim_cases_ijkl_2, i - 1, i, j - 1, j, shared->dim_cases_ijkl_1, shared->dim_cases_ijkl_12, shared->dim_cases_ijkl_123);
      }
    }
    for (int i = 1; i <= shared->dim_n_R_1; ++i) {
      for (int j = 1; j <= shared->dim_n_R_2; ++j) {
        internal.n_R[i - 1 + shared->dim_n_R_1 * (j - 1)] = (internal.mean_R[shared->dim_mean_R_1 * (j - 1) + i - 1] < 0 ? 0 : (internal.mean_R[shared->dim_mean_R_1 * (j - 1) + i - 1] < - 1 ? dust::random::poisson<real_type>(rng_state, - 1) : dust::random::poisson<real_type>(rng_state, internal.mean_R[shared->dim_mean_R_1 * (j - 1) + i - 1])));
      }
    }
    for (int i = 1; i <= shared->dim_n_R_1; ++i) {
      for (int j = 1; j <= shared->dim_n_R_2; ++j) {
        internal.n_R[i - 1 + shared->dim_n_R_1 * (j - 1)] = (internal.n_R[shared->dim_n_R_1 * (j - 1) + i - 1] >= (R[shared->dim_R_1 * (j - 1) + i - 1]) ? R[shared->dim_R_1 * (j - 1) + i - 1] : internal.n_R[shared->dim_n_R_1 * (j - 1) + i - 1]);
      }
    }
    for (int i = 1; i <= shared->dim_n_RV1_1; ++i) {
      for (int j = 1; j <= shared->dim_n_RV1_2; ++j) {
        internal.n_RV1[i - 1 + shared->dim_n_RV1_1 * (j - 1)] = (internal.mean_RV1[shared->dim_mean_RV1_1 * (j - 1) + i - 1] < 0 ? 0 : (internal.mean_RV1[shared->dim_mean_RV1_1 * (j - 1) + i - 1] < - 1 ? dust::random::poisson<real_type>(rng_state, - 1) : dust::random::poisson<real_type>(rng_state, internal.mean_RV1[shared->dim_mean_RV1_1 * (j - 1) + i - 1])));
      }
    }
    for (int i = 1; i <= shared->dim_n_RV1_1; ++i) {
      for (int j = 1; j <= shared->dim_n_RV1_2; ++j) {
        internal.n_RV1[i - 1 + shared->dim_n_RV1_1 * (j - 1)] = (internal.n_RV1[shared->dim_n_RV1_1 * (j - 1) + i - 1] >= RV1[shared->dim_RV1_1 * (j - 1) + i - 1] ? RV1[shared->dim_RV1_1 * (j - 1) + i - 1] : internal.n_RV1[shared->dim_n_RV1_1 * (j - 1) + i - 1]);
      }
    }
    for (int i = 1; i <= shared->dim_n_RV2RV2_1; ++i) {
      for (int j = 1; j <= shared->dim_n_RV2RV2_2; ++j) {
        internal.n_RV2RV2[i - 1 + shared->dim_n_RV2RV2_1 * (j - 1)] = (internal.mean_RV2[shared->dim_mean_RV2_1 * (j - 1) + i - 1] < 0 ? 0 : (internal.mean_RV2[shared->dim_mean_RV2_1 * (j - 1) + i - 1] < - 1 ? dust::random::poisson<real_type>(rng_state, - 1) : dust::random::poisson<real_type>(rng_state, internal.mean_RV2[shared->dim_mean_RV2_1 * (j - 1) + i - 1])));
      }
    }
    for (int i = 1; i <= shared->dim_n_RV2RV2_1; ++i) {
      for (int j = 1; j <= shared->dim_n_RV2RV2_2; ++j) {
        internal.n_RV2RV2[i - 1 + shared->dim_n_RV2RV2_1 * (j - 1)] = (internal.n_RV2RV2[shared->dim_n_RV2RV2_1 * (j - 1) + i - 1] >= RV2[shared->dim_RV2_1 * (j - 1) + i - 1] ? RV2[shared->dim_RV2_1 * (j - 1) + i - 1] : internal.n_RV2RV2[shared->dim_n_RV2RV2_1 * (j - 1) + i - 1]);
      }
    }
    for (int i = 1; i <= shared->dim_lambda_1; ++i) {
      for (int j = 1; j <= shared->dim_lambda_2; ++j) {
        internal.lambda[i - 1 + shared->dim_lambda_1 * (j - 1)] = shared->beta * internal.cases_ij[shared->dim_cases_ij_1 * (j - 1) + i - 1] / (real_type) N;
      }
    }
    for (int i = 1; i <= shared->len_ageing; ++i) {
      for (int j = 1; j <= shared->dim_n_RRV1_2; ++j) {
        internal.n_RRV1[i - 1 + shared->dim_n_RRV1_1 * (j - 1)] = dust::random::binomial<real_type>(rng_state, internal.n_R[shared->dim_n_R_1 * (j - 1) + i - 1], internal.prop_v1[shared->dim_prop_v1_1 * (j - 1) + i - 1]);
      }
    }
    for (int i = 1; i <= shared->len_ageing; ++i) {
      for (int j = 1; j <= shared->dim_n_RV1RV2_2; ++j) {
        internal.n_RV1RV2[i - 1 + shared->dim_n_RV1RV2_1 * (j - 1)] = dust::random::binomial<real_type>(rng_state, internal.n_RV1[shared->dim_n_RV1_1 * (j - 1) + i - 1], internal.prop_v1v2[shared->dim_prop_v1v2_1 * (j - 1) + i - 1]);
      }
    }
    for (int i = 1; i <= shared->dim_lambda_t_1; ++i) {
      for (int j = 1; j <= shared->dim_lambda_t_2; ++j) {
        internal.lambda_t[i - 1 + shared->dim_lambda_t_1 * (j - 1)] = internal.lambda[shared->dim_lambda_1 * (j - 1) + i - 1] * (1 + shared->X * dust::math::cos(2 * static_cast<real_type>(3.1415899999999999) * time / (real_type) static_cast<real_type>(365.25) + shared->Y));
      }
    }
    for (int i = 1; i <= shared->len_ageing; ++i) {
      for (int j = 1; j <= shared->dim_n_RR_2; ++j) {
        internal.n_RR[i - 1 + shared->dim_n_RR_1 * (j - 1)] = internal.n_R[shared->dim_n_R_1 * (j - 1) + i - 1] - internal.n_RRV1[shared->dim_n_RRV1_1 * (j - 1) + i - 1];
      }
    }
    for (int i = 1; i <= shared->len_ageing; ++i) {
      for (int j = 1; j <= shared->dim_n_RV1RV1_2; ++j) {
        internal.n_RV1RV1[i - 1 + shared->dim_n_RV1RV1_1 * (j - 1)] = internal.n_RV1[shared->dim_n_RV1_1 * (j - 1) + i - 1] - internal.n_RV1RV2[shared->dim_n_RV1RV2_1 * (j - 1) + i - 1];
      }
    }
    {
       int i = 1;
       for (int j = 1; j <= shared->dim_RV2_2; ++j) {
         state_next[shared->offset_variable_RV2 + i - 1 + shared->dim_RV2_1 * (j - 1)] = RV2[shared->dim_RV2_1 * (j - 1) + 0] + internal.n_Iv2R[shared->dim_n_Iv2R_1 * (j - 1) + 0] - internal.n_RV2RV2[shared->dim_n_RV2RV2_1 * (j - 1) + 0];
       }
    }
    for (int i = 2; i <= shared->len_ageing; ++i) {
      for (int j = 1; j <= shared->dim_RV2_2; ++j) {
        state_next[shared->offset_variable_RV2 + i - 1 + shared->dim_RV2_1 * (j - 1)] = RV2[shared->dim_RV2_1 * (j - 1) + i - 1] + internal.n_RV2RV2[shared->dim_n_RV2RV2_1 * (j - 1) + i - 1 - 1] + internal.n_RV1RV2[shared->dim_n_RV1RV2_1 * (j - 1) + i - 1 - 1] - internal.n_RV2RV2[shared->dim_n_RV2RV2_1 * (j - 1) + i - 1] + internal.n_Iv2R[shared->dim_n_Iv2R_1 * (j - 1) + i - 1];
      }
    }
    {
       int i = shared->N_age;
       for (int j = 1; j <= shared->dim_RV2_2; ++j) {
         state_next[shared->offset_variable_RV2 + i - 1 + shared->dim_RV2_1 * (j - 1)] = RV2[shared->dim_RV2_1 * (j - 1) + shared->N_age - 1] + internal.n_RV2RV2[shared->dim_n_RV2RV2_1 * (j - 1) + shared->len_ageing - 1] + internal.n_RV1RV2[shared->dim_n_RV1RV2_1 * (j - 1) + shared->len_ageing - 1] + internal.n_Iv2R[shared->dim_n_Iv2R_1 * (j - 1) + shared->N_age - 1];
       }
    }
    for (int i = 1; i <= shared->dim_p_SE_1; ++i) {
      for (int j = 1; j <= shared->dim_p_SE_2; ++j) {
        internal.p_SE[i - 1 + shared->dim_p_SE_1 * (j - 1)] = 1 - dust::math::exp(- internal.lambda_t[shared->dim_lambda_t_1 * (j - 1) + i - 1] * shared->dt);
      }
    }
    for (int i = 1; i <= shared->dim_p_SEv1_1; ++i) {
      for (int j = 1; j <= shared->dim_p_SEv1_2; ++j) {
        internal.p_SEv1[i - 1 + shared->dim_p_SEv1_1 * (j - 1)] = 1 - dust::math::exp(- internal.lambda_t[shared->dim_lambda_t_1 * (j - 1) + i - 1] * internal.v2[i - 1] * shared->dt);
      }
    }
    for (int i = 1; i <= shared->dim_p_SEv2_1; ++i) {
      for (int j = 1; j <= shared->dim_p_SEv2_2; ++j) {
        internal.p_SEv2[i - 1 + shared->dim_p_SEv2_1 * (j - 1)] = 1 - dust::math::exp(- internal.lambda_t[shared->dim_lambda_t_1 * (j - 1) + i - 1] * internal.v2[i - 1] * shared->dt);
      }
    }
    {
       int i = 1;
       for (int j = 1; j <= shared->dim_R_2; ++j) {
         state_next[shared->offset_variable_R + i - 1 + shared->dim_R_1 * (j - 1)] = R[shared->dim_R_1 * (j - 1) + 0] + internal.n_IsR[shared->dim_n_IsR_1 * (j - 1) + 0] - internal.n_R[shared->dim_n_R_1 * (j - 1) + 0];
       }
    }
    for (int i = 2; i <= shared->len_ageing; ++i) {
      for (int j = 1; j <= shared->dim_R_2; ++j) {
        state_next[shared->offset_variable_R + i - 1 + shared->dim_R_1 * (j - 1)] = R[shared->dim_R_1 * (j - 1) + i - 1] + internal.n_RR[shared->dim_n_RR_1 * (j - 1) + i - 1 - 1] - internal.n_R[shared->dim_n_R_1 * (j - 1) + i - 1] + internal.n_IsR[shared->dim_n_IsR_1 * (j - 1) + i - 1];
      }
    }
    {
       int i = shared->N_age;
       for (int j = 1; j <= shared->dim_R_2; ++j) {
         state_next[shared->offset_variable_R + i - 1 + shared->dim_R_1 * (j - 1)] = R[shared->dim_R_1 * (j - 1) + shared->N_age - 1] + internal.n_RR[shared->dim_n_RR_1 * (j - 1) + shared->len_ageing - 1] + internal.n_IsR[shared->dim_n_IsR_1 * (j - 1) + shared->N_age - 1] - internal.new_birth[j - 1];
       }
    }
    {
       int i = 1;
       for (int j = 1; j <= shared->dim_RV1_2; ++j) {
         state_next[shared->offset_variable_RV1 + i - 1 + shared->dim_RV1_1 * (j - 1)] = RV1[shared->dim_RV1_1 * (j - 1) + 0] + internal.n_Iv1R[shared->dim_n_Iv1R_1 * (j - 1) + 0] - internal.n_RV1[shared->dim_n_RV1_1 * (j - 1) + 0];
       }
    }
    for (int i = 2; i <= shared->len_ageing; ++i) {
      for (int j = 1; j <= shared->dim_RV1_2; ++j) {
        state_next[shared->offset_variable_RV1 + i - 1 + shared->dim_RV1_1 * (j - 1)] = RV1[shared->dim_RV1_1 * (j - 1) + i - 1] + internal.n_RV1RV1[shared->dim_n_RV1RV1_1 * (j - 1) + i - 1 - 1] + internal.n_RRV1[shared->dim_n_RRV1_1 * (j - 1) + i - 1 - 1] - internal.n_RV1[shared->dim_n_RV1_1 * (j - 1) + i - 1] + internal.n_Iv1R[shared->dim_n_Iv1R_1 * (j - 1) + i - 1];
      }
    }
    {
       int i = shared->N_age;
       for (int j = 1; j <= shared->dim_RV1_2; ++j) {
         state_next[shared->offset_variable_RV1 + i - 1 + shared->dim_RV1_1 * (j - 1)] = RV1[shared->dim_RV1_1 * (j - 1) + shared->N_age - 1] + internal.n_RV1RV1[shared->dim_n_RV1RV1_1 * (j - 1) + shared->len_ageing - 1] + internal.n_RRV1[shared->dim_n_RRV1_1 * (j - 1) + shared->len_ageing - 1] + internal.n_Iv1R[shared->dim_n_Iv1R_1 * (j - 1) + shared->N_age - 1];
       }
    }
    for (int i = 1; i <= shared->dim_n_SEs_1; ++i) {
      for (int j = 1; j <= shared->dim_n_SEs_2; ++j) {
        internal.n_SEs[i - 1 + shared->dim_n_SEs_1 * (j - 1)] = dust::random::binomial<real_type>(rng_state, S[shared->dim_S_1 * (j - 1) + i - 1], internal.p_SE[shared->dim_p_SE_1 * (j - 1) + i - 1]);
      }
    }
    for (int i = 1; i <= shared->dim_n_v1E_1; ++i) {
      for (int j = 1; j <= shared->dim_n_v1E_2; ++j) {
        internal.n_v1E[i - 1 + shared->dim_n_v1E_1 * (j - 1)] = dust::random::binomial<real_type>(rng_state, V1[shared->dim_V1_1 * (j - 1) + i - 1], internal.p_SE[shared->dim_p_SE_1 * (j - 1) + i - 1]);
      }
    }
    for (int i = 1; i <= shared->dim_n_v1pE_1; ++i) {
      for (int j = 1; j <= shared->dim_n_v1pE_2; ++j) {
        internal.n_v1pE[i - 1 + shared->dim_n_v1pE_1 * (j - 1)] = dust::random::binomial<real_type>(rng_state, V1p[shared->dim_V1p_1 * (j - 1) + i - 1], internal.p_SEv1[shared->dim_p_SEv1_1 * (j - 1) + i - 1]);
      }
    }
    for (int i = 1; i <= shared->dim_n_v2E_1; ++i) {
      for (int j = 1; j <= shared->dim_n_v2E_2; ++j) {
        internal.n_v2E[i - 1 + shared->dim_n_v2E_1 * (j - 1)] = dust::random::binomial<real_type>(rng_state, V2[shared->dim_V2_1 * (j - 1) + i - 1], internal.p_SE[shared->dim_p_SE_1 * (j - 1) + i - 1]);
      }
    }
    for (int i = 1; i <= shared->dim_n_v2pE_1; ++i) {
      for (int j = 1; j <= shared->dim_n_v2pE_2; ++j) {
        internal.n_v2pE[i - 1 + shared->dim_n_v2pE_1 * (j - 1)] = dust::random::binomial<real_type>(rng_state, V2p[shared->dim_V2p_1 * (j - 1) + i - 1], internal.p_SEv2[shared->dim_p_SEv2_1 * (j - 1) + i - 1]);
      }
    }
    for (int i = 1; i <= shared->dim_n_S_1; ++i) {
      for (int j = 1; j <= shared->dim_n_S_2; ++j) {
        internal.n_S[i - 1 + shared->dim_n_S_1 * (j - 1)] = (internal.mean_S[shared->dim_mean_S_1 * (j - 1) + i - 1] < 0 ? 0 : (internal.mean_S[shared->dim_mean_S_1 * (j - 1) + i - 1] < - 1 ? dust::random::poisson<real_type>(rng_state, - 1) : dust::random::poisson<real_type>(rng_state, internal.mean_S[shared->dim_mean_S_1 * (j - 1) + i - 1])));
      }
    }
    for (int i = 1; i <= shared->dim_n_S_1; ++i) {
      for (int j = 1; j <= shared->dim_n_S_2; ++j) {
        internal.n_S[i - 1 + shared->dim_n_S_1 * (j - 1)] = (internal.n_S[shared->dim_n_S_1 * (j - 1) + i - 1] >= (S[shared->dim_S_1 * (j - 1) + i - 1] - internal.n_SEs[shared->dim_n_SEs_1 * (j - 1) + i - 1]) ? (S[shared->dim_S_1 * (j - 1) + i - 1] - internal.n_SEs[shared->dim_n_SEs_1 * (j - 1) + i - 1]) : internal.n_S[shared->dim_n_S_1 * (j - 1) + i - 1]);
      }
    }
    for (int i = 1; i <= shared->dim_n_V1_1; ++i) {
      for (int j = 1; j <= shared->dim_n_V1_2; ++j) {
        internal.n_V1[i - 1 + shared->dim_n_V1_1 * (j - 1)] = (internal.mean_V1[shared->dim_mean_V1_1 * (j - 1) + i - 1] < 0 ? 0 : (internal.mean_V1[shared->dim_mean_V1_1 * (j - 1) + i - 1] < - 1 ? dust::random::poisson<real_type>(rng_state, - 1) : dust::random::poisson<real_type>(rng_state, internal.mean_V1[shared->dim_mean_V1_1 * (j - 1) + i - 1])));
      }
    }
    for (int i = 1; i <= shared->dim_n_V1_1; ++i) {
      for (int j = 1; j <= shared->dim_n_V1_2; ++j) {
        internal.n_V1[i - 1 + shared->dim_n_V1_1 * (j - 1)] = (internal.n_V1[shared->dim_n_V1_1 * (j - 1) + i - 1] >= (V1[shared->dim_V1_1 * (j - 1) + i - 1] - internal.n_v1E[shared->dim_n_v1E_1 * (j - 1) + i - 1]) ? (V1[shared->dim_V1_1 * (j - 1) + i - 1] - internal.n_v1E[shared->dim_n_v1E_1 * (j - 1) + i - 1]) : internal.n_V1[shared->dim_n_V1_1 * (j - 1) + i - 1]);
      }
    }
    for (int i = 1; i <= shared->dim_n_V1p_1; ++i) {
      for (int j = 1; j <= shared->dim_n_V1p_2; ++j) {
        internal.n_V1p[i - 1 + shared->dim_n_V1p_1 * (j - 1)] = (internal.mean_V1p[shared->dim_mean_V1p_1 * (j - 1) + i - 1] < 0 ? 0 : (internal.mean_V1p[shared->dim_mean_V1p_1 * (j - 1) + i - 1] < - 1 ? dust::random::poisson<real_type>(rng_state, - 1) : dust::random::poisson<real_type>(rng_state, internal.mean_V1p[shared->dim_mean_V1p_1 * (j - 1) + i - 1])));
      }
    }
    for (int i = 1; i <= shared->dim_n_V1p_1; ++i) {
      for (int j = 1; j <= shared->dim_n_V1p_2; ++j) {
        internal.n_V1p[i - 1 + shared->dim_n_V1p_1 * (j - 1)] = (internal.n_V1p[shared->dim_n_V1p_1 * (j - 1) + i - 1] >= (V1p[shared->dim_V1p_1 * (j - 1) + i - 1] - internal.n_v1pE[shared->dim_n_v1pE_1 * (j - 1) + i - 1]) ? (V1p[shared->dim_V1p_1 * (j - 1) + i - 1] - internal.n_v1pE[shared->dim_n_v1pE_1 * (j - 1) + i - 1]) : internal.n_V1p[shared->dim_n_V1p_1 * (j - 1) + i - 1]);
      }
    }
    for (int i = 1; i <= shared->dim_n_V2pV2p_1; ++i) {
      for (int j = 1; j <= shared->dim_n_V2pV2p_2; ++j) {
        internal.n_V2pV2p[i - 1 + shared->dim_n_V2pV2p_1 * (j - 1)] = (internal.mean_V2p[shared->dim_mean_V2p_1 * (j - 1) + i - 1] < 0 ? 0 : (internal.mean_V2p[shared->dim_mean_V2p_1 * (j - 1) + i - 1] < - 1 ? dust::random::poisson<real_type>(rng_state, - 1) : dust::random::poisson<real_type>(rng_state, internal.mean_V2p[shared->dim_mean_V2p_1 * (j - 1) + i - 1])));
      }
    }
    for (int i = 1; i <= shared->dim_n_V2pV2p_1; ++i) {
      for (int j = 1; j <= shared->dim_n_V2pV2p_2; ++j) {
        internal.n_V2pV2p[i - 1 + shared->dim_n_V2pV2p_1 * (j - 1)] = (internal.n_V2pV2p[shared->dim_n_V2pV2p_1 * (j - 1) + i - 1] >= (V2p[shared->dim_V2p_1 * (j - 1) + i - 1] - internal.n_v2pE[shared->dim_n_v2pE_1 * (j - 1) + i - 1]) ? (V2p[shared->dim_V2p_1 * (j - 1) + i - 1] - internal.n_v2pE[shared->dim_n_v2pE_1 * (j - 1) + i - 1]) : internal.n_V2pV2p[shared->dim_n_V2pV2p_1 * (j - 1) + i - 1]);
      }
    }
    for (int i = 1; i <= shared->dim_n_V2V2_1; ++i) {
      for (int j = 1; j <= shared->dim_n_V2V2_2; ++j) {
        internal.n_V2V2[i - 1 + shared->dim_n_V2V2_1 * (j - 1)] = (internal.mean_V2[shared->dim_mean_V2_1 * (j - 1) + i - 1] < 0 ? 0 : (internal.mean_V2[shared->dim_mean_V2_1 * (j - 1) + i - 1] < - 1 ? dust::random::poisson<real_type>(rng_state, - 1) : dust::random::poisson<real_type>(rng_state, internal.mean_V2[shared->dim_mean_V2_1 * (j - 1) + i - 1])));
      }
    }
    for (int i = 1; i <= shared->dim_n_V2V2_1; ++i) {
      for (int j = 1; j <= shared->dim_n_V2V2_2; ++j) {
        internal.n_V2V2[i - 1 + shared->dim_n_V2V2_1 * (j - 1)] = (internal.n_V2V2[shared->dim_n_V2V2_1 * (j - 1) + i - 1] >= (V2[shared->dim_V2_1 * (j - 1) + i - 1] - internal.n_v2E[shared->dim_n_v2E_1 * (j - 1) + i - 1]) ? (V2[shared->dim_V2_1 * (j - 1) + i - 1] - internal.n_v2E[shared->dim_n_v2E_1 * (j - 1) + i - 1]) : internal.n_V2V2[shared->dim_n_V2V2_1 * (j - 1) + i - 1]);
      }
    }
    for (int i = 1; i <= shared->dim_Es_1; ++i) {
      for (int j = 1; j <= shared->dim_Es_2; ++j) {
        state_next[shared->offset_variable_Es + i - 1 + shared->dim_Es_1 * (j - 1)] = Es[shared->dim_Es_1 * (j - 1) + i - 1] + internal.n_SEs[shared->dim_n_SEs_1 * (j - 1) + i - 1] - internal.n_EsIs[shared->dim_n_EsIs_1 * (j - 1) + i - 1];
      }
    }
    for (int i = 1; i <= shared->dim_Ev1_1; ++i) {
      for (int j = 1; j <= shared->dim_Ev1_2; ++j) {
        state_next[shared->offset_variable_Ev1 + i - 1 + shared->dim_Ev1_1 * (j - 1)] = Ev1[shared->dim_Ev1_1 * (j - 1) + i - 1] + internal.n_v1E[shared->dim_n_v1E_1 * (j - 1) + i - 1] + internal.n_v1pE[shared->dim_n_v1pE_1 * (j - 1) + i - 1] - internal.n_Ev1Iv1[shared->dim_n_Ev1Iv1_1 * (j - 1) + i - 1];
      }
    }
    for (int i = 1; i <= shared->dim_Ev2_1; ++i) {
      for (int j = 1; j <= shared->dim_Ev2_2; ++j) {
        state_next[shared->offset_variable_Ev2 + i - 1 + shared->dim_Ev2_1 * (j - 1)] = Ev2[shared->dim_Ev2_1 * (j - 1) + i - 1] + internal.n_v2E[shared->dim_n_v2E_1 * (j - 1) + i - 1] + internal.n_v2pE[shared->dim_n_v2pE_1 * (j - 1) + i - 1] - internal.n_Ev12v2[shared->dim_n_Ev12v2_1 * (j - 1) + i - 1];
      }
    }
    for (int i = 1; i <= shared->len_ageing; ++i) {
      for (int j = 1; j <= shared->dim_n_SVtot_2; ++j) {
        internal.n_SVtot[i - 1 + shared->dim_n_SVtot_1 * (j - 1)] = dust::random::binomial<real_type>(rng_state, internal.n_S[shared->dim_n_S_1 * (j - 1) + i - 1], internal.prop_v1[shared->dim_prop_v1_1 * (j - 1) + i - 1]);
      }
    }
    for (int i = 1; i <= shared->len_ageing; ++i) {
      for (int j = 1; j <= shared->dim_n_V1pV2p_2; ++j) {
        internal.n_V1pV2p[i - 1 + shared->dim_n_V1pV2p_1 * (j - 1)] = dust::random::binomial<real_type>(rng_state, internal.n_V1p[shared->dim_n_V1p_1 * (j - 1) + i - 1], internal.prop_v1v2[shared->dim_prop_v1v2_1 * (j - 1) + i - 1]);
      }
    }
    for (int i = 1; i <= shared->len_ageing; ++i) {
      for (int j = 1; j <= shared->dim_n_V1V2tot_2; ++j) {
        internal.n_V1V2tot[i - 1 + shared->dim_n_V1V2tot_1 * (j - 1)] = dust::random::binomial<real_type>(rng_state, internal.n_V1[shared->dim_n_V1_1 * (j - 1) + i - 1], internal.prop_v1v2[shared->dim_prop_v1v2_1 * (j - 1) + i - 1]);
      }
    }
    for (int i = 1; i <= shared->len_ageing; ++i) {
      for (int j = 1; j <= shared->dim_n_SS_2; ++j) {
        internal.n_SS[i - 1 + shared->dim_n_SS_1 * (j - 1)] = internal.n_S[shared->dim_n_S_1 * (j - 1) + i - 1] - internal.n_SVtot[shared->dim_n_SVtot_1 * (j - 1) + i - 1];
      }
    }
    for (int i = 1; i <= shared->len_ageing; ++i) {
      for (int j = 1; j <= shared->dim_n_SV1_2; ++j) {
        internal.n_SV1[i - 1 + shared->dim_n_SV1_1 * (j - 1)] = dust::random::binomial<real_type>(rng_state, internal.n_SVtot[shared->dim_n_SVtot_1 * (j - 1) + i - 1], shared->v_fail);
      }
    }
    for (int i = 1; i <= shared->len_ageing; ++i) {
      for (int j = 1; j <= shared->dim_n_V1pV1p_2; ++j) {
        internal.n_V1pV1p[i - 1 + shared->dim_n_V1pV1p_1 * (j - 1)] = internal.n_V1p[shared->dim_n_V1p_1 * (j - 1) + i - 1] - internal.n_V1pV2p[shared->dim_n_V1pV2p_1 * (j - 1) + i - 1];
      }
    }
    for (int i = 1; i <= shared->len_ageing; ++i) {
      for (int j = 1; j <= shared->dim_n_V1V1_2; ++j) {
        internal.n_V1V1[i - 1 + shared->dim_n_V1V1_1 * (j - 1)] = internal.n_V1[shared->dim_n_V1_1 * (j - 1) + i - 1] - internal.n_V1V2tot[shared->dim_n_V1V2tot_1 * (j - 1) + i - 1];
      }
    }
    for (int i = 1; i <= shared->len_ageing; ++i) {
      for (int j = 1; j <= shared->dim_n_V1V2_2; ++j) {
        internal.n_V1V2[i - 1 + shared->dim_n_V1V2_1 * (j - 1)] = dust::random::binomial<real_type>(rng_state, internal.n_V1V2tot[shared->dim_n_V1V2tot_1 * (j - 1) + i - 1], shared->v_fail);
      }
    }
    for (int i = 1; i <= shared->len_ageing; ++i) {
      for (int j = 1; j <= shared->dim_n_SV1p_2; ++j) {
        internal.n_SV1p[i - 1 + shared->dim_n_SV1p_1 * (j - 1)] = internal.n_SVtot[shared->dim_n_SVtot_1 * (j - 1) + i - 1] - internal.n_SV1[shared->dim_n_SV1_1 * (j - 1) + i - 1];
      }
    }
    for (int i = 1; i <= shared->len_ageing; ++i) {
      for (int j = 1; j <= shared->dim_n_V1V2p_2; ++j) {
        internal.n_V1V2p[i - 1 + shared->dim_n_V1V2p_1 * (j - 1)] = internal.n_V1V2tot[shared->dim_n_V1V2tot_1 * (j - 1) + i - 1] - internal.n_V1V2[shared->dim_n_V1V2_1 * (j - 1) + i - 1];
      }
    }
    {
       int i = 1;
       for (int j = 1; j <= shared->dim_S_2; ++j) {
         state_next[4 + i - 1 + shared->dim_S_1 * (j - 1)] = S[shared->dim_S_1 * (j - 1) + 0] + internal.n_MS[j - 1] - internal.n_S[shared->dim_n_S_1 * (j - 1) + 0] - internal.n_SEs[shared->dim_n_SEs_1 * (j - 1) + 0];
       }
    }
    for (int i = 2; i <= shared->len_ageing; ++i) {
      for (int j = 1; j <= shared->dim_S_2; ++j) {
        state_next[4 + i - 1 + shared->dim_S_1 * (j - 1)] = S[shared->dim_S_1 * (j - 1) + i - 1] + internal.n_SS[shared->dim_n_SS_1 * (j - 1) + i - 1 - 1] - internal.n_S[shared->dim_n_S_1 * (j - 1) + i - 1] - internal.n_SEs[shared->dim_n_SEs_1 * (j - 1) + i - 1];
      }
    }
    {
       int i = shared->N_age;
       for (int j = 1; j <= shared->dim_S_2; ++j) {
         state_next[4 + i - 1 + shared->dim_S_1 * (j - 1)] = S[shared->dim_S_1 * (j - 1) + shared->N_age - 1] + internal.n_SS[shared->dim_n_SS_1 * (j - 1) + shared->len_ageing - 1] - internal.n_SEs[shared->dim_n_SEs_1 * (j - 1) + shared->N_age - 1];
       }
    }
    {
       int i = 1;
       for (int j = 1; j <= shared->dim_V1_2; ++j) {
         state_next[shared->offset_variable_V1 + i - 1 + shared->dim_V1_1 * (j - 1)] = V1[shared->dim_V1_1 * (j - 1) + 0] - internal.n_V1[shared->dim_n_V1_1 * (j - 1) + 0] - internal.n_v1E[shared->dim_n_v1E_1 * (j - 1) + 0];
       }
    }
    for (int i = 2; i <= shared->len_ageing; ++i) {
      for (int j = 1; j <= shared->dim_V1_2; ++j) {
        state_next[shared->offset_variable_V1 + i - 1 + shared->dim_V1_1 * (j - 1)] = V1[shared->dim_V1_1 * (j - 1) + i - 1] + internal.n_V1V1[shared->dim_n_V1V1_1 * (j - 1) + i - 1 - 1] + internal.n_SV1[shared->dim_n_SV1_1 * (j - 1) + i - 1 - 1] - internal.n_V1[shared->dim_n_V1_1 * (j - 1) + i - 1] - internal.n_v1E[shared->dim_n_v1E_1 * (j - 1) + i - 1];
      }
    }
    {
       int i = shared->N_age;
       for (int j = 1; j <= shared->dim_V1_2; ++j) {
         state_next[shared->offset_variable_V1 + i - 1 + shared->dim_V1_1 * (j - 1)] = V1[shared->dim_V1_1 * (j - 1) + shared->N_age - 1] + internal.n_V1V1[shared->dim_n_V1V1_1 * (j - 1) + shared->len_ageing - 1] + internal.n_SV1[shared->dim_n_SV1_1 * (j - 1) + shared->len_ageing - 1] - internal.n_v1E[shared->dim_n_v1E_1 * (j - 1) + shared->N_age - 1];
       }
    }
    {
       int i = 1;
       for (int j = 1; j <= shared->dim_V2_2; ++j) {
         state_next[shared->offset_variable_V2 + i - 1 + shared->dim_V2_1 * (j - 1)] = V2[shared->dim_V2_1 * (j - 1) + 0] - internal.n_V2V2[shared->dim_n_V2V2_1 * (j - 1) + 0] - internal.n_v2E[shared->dim_n_v2E_1 * (j - 1) + 0];
       }
    }
    for (int i = 2; i <= shared->len_ageing; ++i) {
      for (int j = 1; j <= shared->dim_V2_2; ++j) {
        state_next[shared->offset_variable_V2 + i - 1 + shared->dim_V2_1 * (j - 1)] = V2[shared->dim_V2_1 * (j - 1) + i - 1] + internal.n_V2V2[shared->dim_n_V2V2_1 * (j - 1) + i - 1 - 1] + internal.n_V1V2[shared->dim_n_V1V2_1 * (j - 1) + i - 1 - 1] - internal.n_V2V2[shared->dim_n_V2V2_1 * (j - 1) + i - 1] - internal.n_v2E[shared->dim_n_v2E_1 * (j - 1) + i - 1];
      }
    }
    {
       int i = shared->N_age;
       for (int j = 1; j <= shared->dim_V2_2; ++j) {
         state_next[shared->offset_variable_V2 + i - 1 + shared->dim_V2_1 * (j - 1)] = V2[shared->dim_V2_1 * (j - 1) + shared->N_age - 1] + internal.n_V2V2[shared->dim_n_V2V2_1 * (j - 1) + shared->len_ageing - 1] + internal.n_V1V2[shared->dim_n_V1V2_1 * (j - 1) + shared->len_ageing - 1] - internal.n_v2E[shared->dim_n_v2E_1 * (j - 1) + shared->N_age - 1];
       }
    }
    {
       int i = 1;
       for (int j = 1; j <= shared->dim_V1p_2; ++j) {
         state_next[shared->offset_variable_V1p + i - 1 + shared->dim_V1p_1 * (j - 1)] = V1p[shared->dim_V1p_1 * (j - 1) + 0] - internal.n_V1p[shared->dim_n_V1p_1 * (j - 1) + 0] - internal.n_v1pE[shared->dim_n_v1pE_1 * (j - 1) + 0];
       }
    }
    for (int i = 2; i <= shared->len_ageing; ++i) {
      for (int j = 1; j <= shared->dim_V1p_2; ++j) {
        state_next[shared->offset_variable_V1p + i - 1 + shared->dim_V1p_1 * (j - 1)] = V1p[shared->dim_V1p_1 * (j - 1) + i - 1] + internal.n_V1pV1p[shared->dim_n_V1pV1p_1 * (j - 1) + i - 1 - 1] + internal.n_SV1p[shared->dim_n_SV1p_1 * (j - 1) + i - 1 - 1] - internal.n_V1p[shared->dim_n_V1p_1 * (j - 1) + i - 1] - internal.n_v1pE[shared->dim_n_v1pE_1 * (j - 1) + i - 1];
      }
    }
    {
       int i = shared->N_age;
       for (int j = 1; j <= shared->dim_V1p_2; ++j) {
         state_next[shared->offset_variable_V1p + i - 1 + shared->dim_V1p_1 * (j - 1)] = V1p[shared->dim_V1p_1 * (j - 1) + shared->N_age - 1] + internal.n_V1pV1p[shared->dim_n_V1pV1p_1 * (j - 1) + shared->len_ageing - 1] + internal.n_SV1p[shared->dim_n_SV1p_1 * (j - 1) + shared->len_ageing - 1] - internal.n_v1pE[shared->dim_n_v1pE_1 * (j - 1) + shared->N_age - 1];
       }
    }
    {
       int i = 1;
       for (int j = 1; j <= shared->dim_V2p_2; ++j) {
         state_next[shared->offset_variable_V2p + i - 1 + shared->dim_V2p_1 * (j - 1)] = V2p[shared->dim_V2p_1 * (j - 1) + 0] - internal.n_V2pV2p[shared->dim_n_V2pV2p_1 * (j - 1) + 0] - internal.n_v2pE[shared->dim_n_v2pE_1 * (j - 1) + 0];
       }
    }
    for (int i = 2; i <= shared->len_ageing; ++i) {
      for (int j = 1; j <= shared->dim_V2p_2; ++j) {
        state_next[shared->offset_variable_V2p + i - 1 + shared->dim_V2p_1 * (j - 1)] = V2p[shared->dim_V2p_1 * (j - 1) + i - 1] + internal.n_V2pV2p[shared->dim_n_V2pV2p_1 * (j - 1) + i - 1 - 1] + internal.n_V1V2p[shared->dim_n_V1V2p_1 * (j - 1) + i - 1 - 1] + internal.n_V1pV2p[shared->dim_n_V1pV2p_1 * (j - 1) + i - 1 - 1] - internal.n_V2pV2p[shared->dim_n_V2pV2p_1 * (j - 1) + i - 1] - internal.n_v2pE[shared->dim_n_v2pE_1 * (j - 1) + i - 1];
      }
    }
    {
       int i = shared->N_age;
       for (int j = 1; j <= shared->dim_V2p_2; ++j) {
         state_next[shared->offset_variable_V2p + i - 1 + shared->dim_V2p_1 * (j - 1)] = V2p[shared->dim_V2p_1 * (j - 1) + shared->N_age - 1] + internal.n_V2pV2p[shared->dim_n_V2pV2p_1 * (j - 1) + shared->len_ageing - 1] + internal.n_V1V2p[shared->dim_n_V1V2p_1 * (j - 1) + shared->len_ageing - 1] + internal.n_V1pV2p[shared->dim_n_V1pV2p_1 * (j - 1) + shared->len_ageing - 1] - internal.n_v2pE[shared->dim_n_v2pE_1 * (j - 1) + shared->N_age - 1];
       }
    }
  }
private:
  std::shared_ptr<const shared_type> shared;
  internal_type internal;
};
template <typename real_type, typename container>
__host__ __device__ real_type odin_sum2(const container x, int from_i, int to_i, int from_j, int to_j, int dim_x_1) {
  real_type tot = 0.0;
  for (int j = from_j; j < to_j; ++j) {
    int jj = j * dim_x_1;
    for (int i = from_i; i < to_i; ++i) {
      tot += x[i + jj];
    }
  }
  return tot;
}
template <typename real_type, typename container>
__host__ __device__ real_type odin_sum3(const container x, int from_i, int to_i, int from_j, int to_j, int from_k, int to_k, int dim_x_1, int dim_x_12) {
  real_type tot = 0.0;
  for (int k = from_k; k < to_k; ++k) {
    int kk = k * dim_x_12;
    for (int j = from_j; j < to_j; ++j) {
      int jj = j * dim_x_1 + kk;
      for (int i = from_i; i < to_i; ++i) {
        tot += x[i + jj];
      }
    }
  }
  return tot;
}
template <typename real_type, typename container>
__host__ __device__ real_type odin_sum4(const container x, int from_i, int to_i, int from_j, int to_j, int from_k, int to_k, int from_l, int to_l, int dim_x_1, int dim_x_12, int dim_x_123) {
  real_type tot = 0.0;
  for (int l = from_l; l < to_l; ++l) {
    int ll = l * dim_x_123;
    for (int k = from_k; k < to_k; ++k) {
      int kk = k * dim_x_12 + ll;
      for (int j = from_j; j < to_j; ++j) {
        int jj = j * dim_x_1 + kk;
        for (int i = from_i; i < to_i; ++i) {
          tot += x[i + jj];
        }
      }
    }
  }
  return tot;
}
#include <array>
#include <cpp11/R.hpp>
#include <cpp11/sexp.hpp>
#include <cpp11/doubles.hpp>
#include <cpp11/integers.hpp>
#include <cpp11/list.hpp>
#include <cpp11/strings.hpp>
#include <memory>
#include <vector>

template <typename T>
inline bool is_na(T x);

template <>
inline bool is_na(int x) {
  return x == NA_INTEGER;
}

template <>
inline bool is_na(double x) {
  return ISNA(x);
}

inline size_t object_length(cpp11::sexp x) {
  return ::Rf_xlength(x);
}

template <typename T>
void user_check_value(T value, const char *name, T min, T max) {
  if (is_na(value)) {
    cpp11::stop("'%s' must not be NA", name);
  }
  if (!is_na(min) && value < min) {
    cpp11::stop("Expected '%s' to be at least %g", name, (double) min);
  }
  if (!is_na(max) && value > max) {
    cpp11::stop("Expected '%s' to be at most %g", name, (double) max);
  }
}

template <typename T>
void user_check_array_value(const std::vector<T>& value, const char *name,
                            T min, T max) {
  for (auto& x : value) {
    user_check_value(x, name, min, max);
  }
}

inline size_t user_get_array_rank(cpp11::sexp x) {
  if (!::Rf_isArray(x)) {
    return 1;
  } else {
    cpp11::integers dim = cpp11::as_cpp<cpp11::integers>(x.attr("dim"));
    return dim.size();
  }
}

template <size_t N>
void user_check_array_rank(cpp11::sexp x, const char *name) {
  size_t rank = user_get_array_rank(x);
  if (rank != N) {
    if (N == 1) {
      cpp11::stop("Expected a vector for '%s'", name);
    } else if (N == 2) {
      cpp11::stop("Expected a matrix for '%s'", name);
    } else {
      cpp11::stop("Expected an array of rank %d for '%s'",
                  static_cast<int>(N), name);
    }
  }
}

template <size_t N>
void user_check_array_dim(cpp11::sexp x, const char *name,
                          const std::array<int, N>& dim_expected) {
  cpp11::integers dim = cpp11::as_cpp<cpp11::integers>(x.attr("dim"));
  for (size_t i = 0; i < N; ++i) {
    if (dim[(int)i] != dim_expected[i]) {
      Rf_error("Incorrect size of dimension %d of '%s' (expected %d)",
               static_cast<int>(i + 1), name, dim_expected[i]);
    }
  }
}

template <>
inline void user_check_array_dim<1>(cpp11::sexp x, const char *name,
                                    const std::array<int, 1>& dim_expected) {
  if ((int)object_length(x) != dim_expected[0]) {
    cpp11::stop("Expected length %d value for '%s'", dim_expected[0], name);
  }
}

template <size_t N>
void user_set_array_dim(cpp11::sexp x, const char *name,
                        std::array<int, N>& dim) {
  cpp11::integers dim_given = cpp11::as_cpp<cpp11::integers>(x.attr("dim"));
  std::copy(dim_given.begin(), dim_given.end(), dim.begin());
}

template <>
inline void user_set_array_dim<1>(cpp11::sexp x, const char *name,
                                  std::array<int, 1>& dim) {
  dim[0] = object_length(x);
}

template <typename T>
T user_get_scalar(cpp11::list user, const char *name,
                  const T previous, T min, T max) {
  T ret = previous;
  cpp11::sexp x = user[name];
  if (x != R_NilValue) {
    if (object_length(x) != 1) {
      cpp11::stop("Expected a scalar numeric for '%s'", name);
    }
    // TODO: when we're getting out an integer this is a bit too relaxed
    if (TYPEOF(x) == REALSXP) {
      ret = cpp11::as_cpp<T>(x);
    } else if (TYPEOF(x) == INTSXP) {
      ret = cpp11::as_cpp<T>(x);
    } else {
      cpp11::stop("Expected a numeric value for %s", name);
    }
  }

  if (is_na(ret)) {
    cpp11::stop("Expected a value for '%s'", name);
  }
  user_check_value<T>(ret, name, min, max);
  return ret;
}

template <>
inline float user_get_scalar<float>(cpp11::list user, const char *name,
                                    const float previous, float min, float max) {
  double value = user_get_scalar<double>(user, name, previous, min, max);
  return static_cast<float>(value);
}

template <typename T>
std::vector<T> user_get_array_value(cpp11::sexp x, const char * name,
                                    T min, T max) {
  std::vector<T> ret = cpp11::as_cpp<std::vector<T>>(x);
  user_check_array_value<T>(ret, name, min, max);
  return ret;
}

template <typename T, size_t N>
std::vector<T> user_get_array_fixed(cpp11::list user, const char *name,
                                    const std::vector<T> previous,
                                    const std::array<int, N>& dim,
                                    T min, T max) {
  cpp11::sexp x = user[name];
  if (x == R_NilValue) {
    if (previous.size() == 0) {
      cpp11::stop("Expected a value for '%s'", name);
    }
    return previous;
  }

  user_check_array_rank<N>(x, name);
  user_check_array_dim<N>(x, name, dim);

  return user_get_array_value<T>(x, name, min, max);
}

template <typename T, size_t N>
std::vector<T> user_get_array_variable(cpp11::list user, const char *name,
                                       std::vector<T> previous,
                                       std::array<int, N>& dim,
                                       T min, T max) {
  cpp11::sexp x = user[name];
  if (x == R_NilValue) {
    if (previous.size() == 0) {
      cpp11::stop("Expected a value for '%s'", name);
    }
    return previous;
  }

  user_check_array_rank<N>(x, name);
  user_set_array_dim<N>(x, name, dim);

  return user_get_array_value<T>(x, name, min, max);
}

template <>
inline std::vector<float> user_get_array_value(cpp11::sexp x, const char * name,
                                               float min, float max) {
  // NOTE: possible under/overflow here for min/max because we've
  // downcast this.
  std::vector<double> value = user_get_array_value<double>(x, name, min, max);
  std::vector<float> ret(value.size());
  std::copy(value.begin(), value.end(), ret.begin());
  return ret;
}

// This is sum with inclusive "from", exclusive "to", following the
// same function in odin
template <typename real_type, typename container>
__host__ __device__
real_type odin_sum1(const container x, size_t from, size_t to) {
  real_type tot = 0.0;
  for (size_t i = from; i < to; ++i) {
    tot += x[i];
  }
  return tot;
}

inline cpp11::writable::integers integer_sequence(size_t from, size_t len) {
  cpp11::writable::integers ret(len);
  int* data = INTEGER(ret);
  for (size_t i = 0, j = from; i < len; ++i, ++j) {
    data[i] = j;
  }
  return ret;
}
namespace dust {
template<>
dust::pars_type<seirv_age_region> dust_pars<seirv_age_region>(cpp11::list user) {
  using real_type = typename seirv_age_region::real_type;
  auto shared = std::make_shared<seirv_age_region::shared_type>();
  seirv_age_region::internal_type internal;
  shared->initial_iter = 1;
  shared->initial_new_Iv1_tot = 0;
  shared->initial_new_Iv2_tot = 0;
  shared->initial_time = 1;
  shared->beta = NA_REAL;
  shared->c = NA_REAL;
  shared->theta = NA_REAL;
  shared->waning = NA_REAL;
  shared->X_import = NA_REAL;
  shared->Y_import = NA_REAL;
  shared->year_start = NA_REAL;
  shared->alpha = 1 / (real_type) 11;
  shared->b = 0;
  shared->delta = 1 / (real_type) 120;
  shared->dt = 1;
  shared->gamma = 1 / (real_type) 8;
  shared->N_age = 2;
  shared->N_reg = 2;
  shared->N_time = 2;
  shared->v_fail = static_cast<real_type>(0.02);
  shared->v_leak = 0;
  shared->v_sec = 0;
  shared->vacc = 1;
  shared->X = 1;
  shared->Y = 1;
  shared->alpha = user_get_scalar<real_type>(user, "alpha", shared->alpha, NA_REAL, NA_REAL);
  shared->b = user_get_scalar<real_type>(user, "b", shared->b, NA_REAL, NA_REAL);
  shared->beta = user_get_scalar<real_type>(user, "beta", shared->beta, NA_REAL, NA_REAL);
  shared->c = user_get_scalar<real_type>(user, "c", shared->c, NA_REAL, NA_REAL);
  shared->delta = user_get_scalar<real_type>(user, "delta", shared->delta, NA_REAL, NA_REAL);
  shared->dt = user_get_scalar<real_type>(user, "dt", shared->dt, NA_REAL, NA_REAL);
  shared->gamma = user_get_scalar<real_type>(user, "gamma", shared->gamma, NA_REAL, NA_REAL);
  shared->N_age = user_get_scalar<int>(user, "N_age", shared->N_age, NA_INTEGER, NA_INTEGER);
  shared->N_reg = user_get_scalar<int>(user, "N_reg", shared->N_reg, NA_INTEGER, NA_INTEGER);
  shared->N_time = user_get_scalar<int>(user, "N_time", shared->N_time, NA_INTEGER, NA_INTEGER);
  shared->theta = user_get_scalar<real_type>(user, "theta", shared->theta, NA_REAL, NA_REAL);
  shared->v_fail = user_get_scalar<real_type>(user, "v_fail", shared->v_fail, NA_REAL, NA_REAL);
  shared->v_leak = user_get_scalar<real_type>(user, "v_leak", shared->v_leak, NA_REAL, NA_REAL);
  shared->v_sec = user_get_scalar<real_type>(user, "v_sec", shared->v_sec, NA_REAL, NA_REAL);
  shared->vacc = user_get_scalar<real_type>(user, "vacc", shared->vacc, NA_REAL, NA_REAL);
  shared->waning = user_get_scalar<real_type>(user, "waning", shared->waning, NA_REAL, NA_REAL);
  shared->X = user_get_scalar<real_type>(user, "X", shared->X, NA_REAL, NA_REAL);
  shared->X_import = user_get_scalar<real_type>(user, "X_import", shared->X_import, NA_REAL, NA_REAL);
  shared->Y = user_get_scalar<real_type>(user, "Y", shared->Y, NA_REAL, NA_REAL);
  shared->Y_import = user_get_scalar<real_type>(user, "Y_import", shared->Y_import, NA_REAL, NA_REAL);
  shared->year_start = user_get_scalar<real_type>(user, "year_start", shared->year_start, NA_REAL, NA_REAL);
  shared->dim_array_new_1 = shared->N_reg;
  shared->dim_array_new_2 = shared->N_time;
  shared->dim_cases_ij_1 = shared->N_age;
  shared->dim_cases_ij_2 = shared->N_reg;
  shared->dim_cases_ijkl_1 = shared->N_age;
  shared->dim_cases_ijkl_2 = shared->N_reg;
  shared->dim_cases_ijkl_3 = shared->N_age;
  shared->dim_cases_ijkl_4 = shared->N_reg;
  shared->dim_d_1 = shared->N_reg;
  shared->dim_d_2 = shared->N_reg;
  shared->dim_d_a_1 = shared->N_reg;
  shared->dim_d_a_2 = shared->N_reg;
  shared->dim_Es_1 = shared->N_age;
  shared->dim_Es_2 = shared->N_reg;
  shared->dim_Es_init_1 = shared->N_age;
  shared->dim_Es_init_2 = shared->N_reg;
  shared->dim_Ev1_1 = shared->N_age;
  shared->dim_Ev1_2 = shared->N_reg;
  shared->dim_Ev1_init_1 = shared->N_age;
  shared->dim_Ev1_init_2 = shared->N_reg;
  shared->dim_Ev2_1 = shared->N_age;
  shared->dim_Ev2_2 = shared->N_reg;
  shared->dim_Ev2_init_1 = shared->N_age;
  shared->dim_Ev2_init_2 = shared->N_reg;
  shared->dim_import_t_1 = shared->N_age;
  shared->dim_import_t_2 = shared->N_reg;
  shared->dim_Is_1 = shared->N_age;
  shared->dim_Is_2 = shared->N_reg;
  shared->dim_Is_init_1 = shared->N_age;
  shared->dim_Is_init_2 = shared->N_reg;
  shared->dim_Iv1_1 = shared->N_age;
  shared->dim_Iv1_2 = shared->N_reg;
  shared->dim_Iv1_init_1 = shared->N_age;
  shared->dim_Iv1_init_2 = shared->N_reg;
  shared->dim_Iv2_1 = shared->N_age;
  shared->dim_Iv2_2 = shared->N_reg;
  shared->dim_Iv2_init_1 = shared->N_age;
  shared->dim_Iv2_init_2 = shared->N_reg;
  shared->dim_lambda_1 = shared->N_age;
  shared->dim_lambda_2 = shared->N_reg;
  shared->dim_lambda_t_1 = shared->N_age;
  shared->dim_lambda_t_2 = shared->N_reg;
  shared->dim_m_1 = shared->N_age;
  shared->dim_M_1 = shared->N_age;
  shared->dim_m_2 = shared->N_age;
  shared->dim_M_2 = shared->N_reg;
  shared->dim_mean_import_1 = 10;
  shared->dim_mean_import_2 = shared->N_reg;
  shared->dim_mean_R_1 = shared->N_age;
  shared->dim_mean_R_2 = shared->N_reg;
  shared->dim_mean_RV1_1 = shared->N_age;
  shared->dim_mean_RV1_2 = shared->N_reg;
  shared->dim_mean_RV2_1 = shared->N_age;
  shared->dim_mean_RV2_2 = shared->N_reg;
  shared->dim_mean_S_1 = shared->N_age;
  shared->dim_mean_S_2 = shared->N_reg;
  shared->dim_mean_V1_1 = shared->N_age;
  shared->dim_mean_V1_2 = shared->N_reg;
  shared->dim_mean_V1p_1 = shared->N_age;
  shared->dim_mean_V1p_2 = shared->N_reg;
  shared->dim_mean_V2_1 = shared->N_age;
  shared->dim_mean_V2_2 = shared->N_reg;
  shared->dim_mean_V2p_1 = shared->N_age;
  shared->dim_mean_V2p_2 = shared->N_reg;
  shared->dim_N_ageing_S_1 = shared->N_age;
  shared->dim_N_ageing_S_2 = shared->N_reg;
  shared->dim_N_ageing_V1_1 = shared->N_age;
  shared->dim_N_ageing_V1_2 = shared->N_reg;
  shared->dim_N_ageing_V2_1 = shared->N_age;
  shared->dim_N_ageing_V2_2 = shared->N_reg;
  shared->dim_n_EsIs_1 = shared->N_age;
  shared->dim_n_EsIs_2 = shared->N_reg;
  shared->dim_n_Ev12v2_1 = shared->N_age;
  shared->dim_n_Ev12v2_2 = shared->N_reg;
  shared->dim_n_Ev1Iv1_1 = shared->N_age;
  shared->dim_n_Ev1Iv1_2 = shared->N_reg;
  shared->dim_n_IsR_1 = shared->N_age;
  shared->dim_n_IsR_2 = shared->N_reg;
  shared->dim_n_Iv1R_1 = shared->N_age;
  shared->dim_n_Iv1R_2 = shared->N_reg;
  shared->dim_n_Iv2R_1 = shared->N_age;
  shared->dim_n_Iv2R_2 = shared->N_reg;
  shared->dim_n_MS = shared->N_reg;
  shared->dim_n_R_1 = shared->N_age;
  shared->dim_n_R_2 = shared->N_reg;
  shared->dim_n_RR_1 = shared->N_age;
  shared->dim_n_RR_2 = shared->N_reg;
  shared->dim_n_RRV1_1 = shared->N_age;
  shared->dim_n_RRV1_2 = shared->N_reg;
  shared->dim_n_RV1_1 = shared->N_age;
  shared->dim_n_RV1_2 = shared->N_reg;
  shared->dim_n_RV1RV1_1 = shared->N_age;
  shared->dim_n_RV1RV1_2 = shared->N_reg;
  shared->dim_n_RV1RV2_1 = shared->N_age;
  shared->dim_n_RV1RV2_2 = shared->N_reg;
  shared->dim_n_RV2RV2_1 = shared->N_age;
  shared->dim_n_RV2RV2_2 = shared->N_reg;
  shared->dim_n_S_1 = shared->N_age;
  shared->dim_n_S_2 = shared->N_reg;
  shared->dim_n_SEs_1 = shared->N_age;
  shared->dim_n_SEs_2 = shared->N_reg;
  shared->dim_n_SS_1 = shared->N_age;
  shared->dim_n_SS_2 = shared->N_reg;
  shared->dim_N_strat_1 = shared->N_age;
  shared->dim_N_strat_2 = shared->N_reg;
  shared->dim_n_SV1_1 = shared->N_age;
  shared->dim_n_SV1_2 = shared->N_reg;
  shared->dim_n_SV1p_1 = shared->N_age;
  shared->dim_n_SV1p_2 = shared->N_reg;
  shared->dim_n_SVtot_1 = shared->N_age;
  shared->dim_n_SVtot_2 = shared->N_reg;
  shared->dim_n_V1_1 = shared->N_age;
  shared->dim_n_V1_2 = shared->N_reg;
  shared->dim_n_v1E_1 = shared->N_age;
  shared->dim_n_v1E_2 = shared->N_reg;
  shared->dim_n_V1p_1 = shared->N_age;
  shared->dim_n_V1p_2 = shared->N_reg;
  shared->dim_n_v1pE_1 = shared->N_age;
  shared->dim_n_v1pE_2 = shared->N_reg;
  shared->dim_n_V1pV1p_1 = shared->N_age;
  shared->dim_n_V1pV1p_2 = shared->N_reg;
  shared->dim_n_V1pV2p_1 = shared->N_age;
  shared->dim_n_V1pV2p_2 = shared->N_reg;
  shared->dim_n_V1V1_1 = shared->N_age;
  shared->dim_n_V1V1_2 = shared->N_reg;
  shared->dim_n_V1V2_1 = shared->N_age;
  shared->dim_n_V1V2_2 = shared->N_reg;
  shared->dim_n_V1V2p_1 = shared->N_age;
  shared->dim_n_V1V2p_2 = shared->N_reg;
  shared->dim_n_V1V2tot_1 = shared->N_age;
  shared->dim_n_V1V2tot_2 = shared->N_reg;
  shared->dim_n_v2E_1 = shared->N_age;
  shared->dim_n_v2E_2 = shared->N_reg;
  shared->dim_n_v2pE_1 = shared->N_age;
  shared->dim_n_v2pE_2 = shared->N_reg;
  shared->dim_n_V2pV2p_1 = shared->N_age;
  shared->dim_n_V2pV2p_2 = shared->N_reg;
  shared->dim_n_V2V2_1 = shared->N_age;
  shared->dim_n_V2V2_2 = shared->N_reg;
  shared->dim_new_birth = shared->N_reg;
  shared->dim_new_IS_1 = shared->N_age;
  shared->dim_new_IS_2 = shared->N_reg;
  shared->dim_new_IV1_1 = shared->N_age;
  shared->dim_new_IV1_2 = shared->N_reg;
  shared->dim_new_IV2_1 = shared->N_age;
  shared->dim_new_IV2_2 = shared->N_reg;
  shared->dim_p_MS = shared->N_reg;
  shared->dim_p_SE_1 = shared->N_age;
  shared->dim_p_SE_2 = shared->N_reg;
  shared->dim_p_SEv1_1 = shared->N_age;
  shared->dim_p_SEv1_2 = shared->N_reg;
  shared->dim_p_SEv2_1 = shared->N_age;
  shared->dim_p_SEv2_2 = shared->N_reg;
  shared->dim_pop_per_age_s_1 = shared->N_age;
  shared->dim_pop_per_age_s_2 = shared->N_reg;
  shared->dim_pop_per_age_v1_1 = shared->N_age;
  shared->dim_pop_per_age_v1_2 = shared->N_reg;
  shared->dim_pop_per_age_v2_1 = shared->N_age;
  shared->dim_pop_per_age_v2_2 = shared->N_reg;
  shared->dim_prop_after_change = shared->N_age;
  shared->dim_R_1 = shared->N_age;
  shared->dim_R_2 = shared->N_reg;
  shared->dim_recov_1 = shared->N_age;
  shared->dim_recov_2 = shared->N_reg;
  shared->dim_RV1_1 = shared->N_age;
  shared->dim_RV1_2 = shared->N_reg;
  shared->dim_RV2_1 = shared->N_age;
  shared->dim_RV2_2 = shared->N_reg;
  shared->dim_S_1 = shared->N_age;
  shared->dim_S_2 = shared->N_reg;
  shared->dim_S_init_1 = shared->N_age;
  shared->dim_S_init_2 = shared->N_reg;
  shared->dim_V1_1 = shared->N_age;
  shared->dim_V1_2 = shared->N_reg;
  shared->dim_V1_init_1 = shared->N_age;
  shared->dim_V1_init_2 = shared->N_reg;
  shared->dim_V1p_1 = shared->N_age;
  shared->dim_V1p_2 = shared->N_reg;
  shared->dim_v2 = shared->N_age;
  shared->dim_V2_1 = shared->N_age;
  shared->dim_V2_2 = shared->N_reg;
  shared->dim_V2_init_1 = shared->N_age;
  shared->dim_V2_init_2 = shared->N_reg;
  shared->dim_V2p_1 = shared->N_age;
  shared->dim_V2p_2 = shared->N_reg;
  shared->dim_year_per_age = shared->N_age;
  shared->len_ageing = shared->N_age - 1;
  shared->p_EI = 1 - dust::math::exp(- shared->alpha * shared->dt);
  shared->p_IR = 1 - dust::math::exp(- shared->gamma * shared->dt);
  internal.n_MS = std::vector<real_type>(shared->dim_n_MS);
  internal.new_birth = std::vector<real_type>(shared->dim_new_birth);
  shared->p_MS = std::vector<real_type>(shared->dim_p_MS);
  internal.prop_after_change = std::vector<real_type>(shared->dim_prop_after_change);
  internal.v2 = std::vector<real_type>(shared->dim_v2);
  shared->dim_array_cov1_1 = shared->len_ageing;
  shared->dim_array_cov1_2 = shared->N_reg;
  shared->dim_array_cov1_3 = shared->N_time;
  shared->dim_array_cov2_1 = shared->len_ageing;
  shared->dim_array_cov2_2 = shared->N_reg;
  shared->dim_array_cov2_3 = shared->N_time;
  shared->dim_array_new = shared->dim_array_new_1 * shared->dim_array_new_2;
  shared->dim_cases_ij = shared->dim_cases_ij_1 * shared->dim_cases_ij_2;
  shared->dim_cases_ijkl = shared->dim_cases_ijkl_1 * shared->dim_cases_ijkl_2 * shared->dim_cases_ijkl_3 * shared->dim_cases_ijkl_4;
  shared->dim_cases_ijkl_12 = shared->dim_cases_ijkl_1 * shared->dim_cases_ijkl_2;
  shared->dim_cases_ijkl_123 = shared->dim_cases_ijkl_1 * shared->dim_cases_ijkl_2 * shared->dim_cases_ijkl_3;
  shared->dim_d = shared->dim_d_1 * shared->dim_d_2;
  shared->dim_d_a = shared->dim_d_a_1 * shared->dim_d_a_2;
  shared->dim_Es = shared->dim_Es_1 * shared->dim_Es_2;
  shared->dim_Es_init = shared->dim_Es_init_1 * shared->dim_Es_init_2;
  shared->dim_Ev1 = shared->dim_Ev1_1 * shared->dim_Ev1_2;
  shared->dim_Ev1_init = shared->dim_Ev1_init_1 * shared->dim_Ev1_init_2;
  shared->dim_Ev2 = shared->dim_Ev2_1 * shared->dim_Ev2_2;
  shared->dim_Ev2_init = shared->dim_Ev2_init_1 * shared->dim_Ev2_init_2;
  shared->dim_import_t = shared->dim_import_t_1 * shared->dim_import_t_2;
  shared->dim_Is = shared->dim_Is_1 * shared->dim_Is_2;
  shared->dim_Is_init = shared->dim_Is_init_1 * shared->dim_Is_init_2;
  shared->dim_Iv1 = shared->dim_Iv1_1 * shared->dim_Iv1_2;
  shared->dim_Iv1_init = shared->dim_Iv1_init_1 * shared->dim_Iv1_init_2;
  shared->dim_Iv2 = shared->dim_Iv2_1 * shared->dim_Iv2_2;
  shared->dim_Iv2_init = shared->dim_Iv2_init_1 * shared->dim_Iv2_init_2;
  shared->dim_lambda = shared->dim_lambda_1 * shared->dim_lambda_2;
  shared->dim_lambda_t = shared->dim_lambda_t_1 * shared->dim_lambda_t_2;
  shared->dim_m = shared->dim_m_1 * shared->dim_m_2;
  shared->dim_M = shared->dim_M_1 * shared->dim_M_2;
  shared->dim_mean_import = shared->dim_mean_import_1 * shared->dim_mean_import_2;
  shared->dim_mean_R = shared->dim_mean_R_1 * shared->dim_mean_R_2;
  shared->dim_mean_RV1 = shared->dim_mean_RV1_1 * shared->dim_mean_RV1_2;
  shared->dim_mean_RV2 = shared->dim_mean_RV2_1 * shared->dim_mean_RV2_2;
  shared->dim_mean_S = shared->dim_mean_S_1 * shared->dim_mean_S_2;
  shared->dim_mean_V1 = shared->dim_mean_V1_1 * shared->dim_mean_V1_2;
  shared->dim_mean_V1p = shared->dim_mean_V1p_1 * shared->dim_mean_V1p_2;
  shared->dim_mean_V2 = shared->dim_mean_V2_1 * shared->dim_mean_V2_2;
  shared->dim_mean_V2p = shared->dim_mean_V2p_1 * shared->dim_mean_V2p_2;
  shared->dim_N_ageing_S = shared->dim_N_ageing_S_1 * shared->dim_N_ageing_S_2;
  shared->dim_N_ageing_V1 = shared->dim_N_ageing_V1_1 * shared->dim_N_ageing_V1_2;
  shared->dim_N_ageing_V2 = shared->dim_N_ageing_V2_1 * shared->dim_N_ageing_V2_2;
  shared->dim_n_EsIs = shared->dim_n_EsIs_1 * shared->dim_n_EsIs_2;
  shared->dim_n_Ev12v2 = shared->dim_n_Ev12v2_1 * shared->dim_n_Ev12v2_2;
  shared->dim_n_Ev1Iv1 = shared->dim_n_Ev1Iv1_1 * shared->dim_n_Ev1Iv1_2;
  shared->dim_n_IsR = shared->dim_n_IsR_1 * shared->dim_n_IsR_2;
  shared->dim_n_Iv1R = shared->dim_n_Iv1R_1 * shared->dim_n_Iv1R_2;
  shared->dim_n_Iv2R = shared->dim_n_Iv2R_1 * shared->dim_n_Iv2R_2;
  shared->dim_n_R = shared->dim_n_R_1 * shared->dim_n_R_2;
  shared->dim_n_RR = shared->dim_n_RR_1 * shared->dim_n_RR_2;
  shared->dim_n_RRV1 = shared->dim_n_RRV1_1 * shared->dim_n_RRV1_2;
  shared->dim_n_RV1 = shared->dim_n_RV1_1 * shared->dim_n_RV1_2;
  shared->dim_n_RV1RV1 = shared->dim_n_RV1RV1_1 * shared->dim_n_RV1RV1_2;
  shared->dim_n_RV1RV2 = shared->dim_n_RV1RV2_1 * shared->dim_n_RV1RV2_2;
  shared->dim_n_RV2RV2 = shared->dim_n_RV2RV2_1 * shared->dim_n_RV2RV2_2;
  shared->dim_n_S = shared->dim_n_S_1 * shared->dim_n_S_2;
  shared->dim_n_SEs = shared->dim_n_SEs_1 * shared->dim_n_SEs_2;
  shared->dim_n_SS = shared->dim_n_SS_1 * shared->dim_n_SS_2;
  shared->dim_N_strat = shared->dim_N_strat_1 * shared->dim_N_strat_2;
  shared->dim_n_SV1 = shared->dim_n_SV1_1 * shared->dim_n_SV1_2;
  shared->dim_n_SV1p = shared->dim_n_SV1p_1 * shared->dim_n_SV1p_2;
  shared->dim_n_SVtot = shared->dim_n_SVtot_1 * shared->dim_n_SVtot_2;
  shared->dim_n_V1 = shared->dim_n_V1_1 * shared->dim_n_V1_2;
  shared->dim_n_v1E = shared->dim_n_v1E_1 * shared->dim_n_v1E_2;
  shared->dim_n_V1p = shared->dim_n_V1p_1 * shared->dim_n_V1p_2;
  shared->dim_n_v1pE = shared->dim_n_v1pE_1 * shared->dim_n_v1pE_2;
  shared->dim_n_V1pV1p = shared->dim_n_V1pV1p_1 * shared->dim_n_V1pV1p_2;
  shared->dim_n_V1pV2p = shared->dim_n_V1pV2p_1 * shared->dim_n_V1pV2p_2;
  shared->dim_n_V1V1 = shared->dim_n_V1V1_1 * shared->dim_n_V1V1_2;
  shared->dim_n_V1V2 = shared->dim_n_V1V2_1 * shared->dim_n_V1V2_2;
  shared->dim_n_V1V2p = shared->dim_n_V1V2p_1 * shared->dim_n_V1V2p_2;
  shared->dim_n_V1V2tot = shared->dim_n_V1V2tot_1 * shared->dim_n_V1V2tot_2;
  shared->dim_n_v2E = shared->dim_n_v2E_1 * shared->dim_n_v2E_2;
  shared->dim_n_v2pE = shared->dim_n_v2pE_1 * shared->dim_n_v2pE_2;
  shared->dim_n_V2pV2p = shared->dim_n_V2pV2p_1 * shared->dim_n_V2pV2p_2;
  shared->dim_n_V2V2 = shared->dim_n_V2V2_1 * shared->dim_n_V2V2_2;
  shared->dim_new_IS = shared->dim_new_IS_1 * shared->dim_new_IS_2;
  shared->dim_new_IV1 = shared->dim_new_IV1_1 * shared->dim_new_IV1_2;
  shared->dim_new_IV2 = shared->dim_new_IV2_1 * shared->dim_new_IV2_2;
  shared->dim_p_SE = shared->dim_p_SE_1 * shared->dim_p_SE_2;
  shared->dim_p_SEv1 = shared->dim_p_SEv1_1 * shared->dim_p_SEv1_2;
  shared->dim_p_SEv2 = shared->dim_p_SEv2_1 * shared->dim_p_SEv2_2;
  shared->dim_pop_per_age_s = shared->dim_pop_per_age_s_1 * shared->dim_pop_per_age_s_2;
  shared->dim_pop_per_age_v1 = shared->dim_pop_per_age_v1_1 * shared->dim_pop_per_age_v1_2;
  shared->dim_pop_per_age_v2 = shared->dim_pop_per_age_v2_1 * shared->dim_pop_per_age_v2_2;
  shared->dim_prop_v1_1 = shared->len_ageing;
  shared->dim_prop_v1_2 = shared->N_reg;
  shared->dim_prop_v1v2_1 = shared->len_ageing;
  shared->dim_prop_v1v2_2 = shared->N_reg;
  shared->dim_R = shared->dim_R_1 * shared->dim_R_2;
  shared->dim_recov = shared->dim_recov_1 * shared->dim_recov_2;
  shared->dim_RV1 = shared->dim_RV1_1 * shared->dim_RV1_2;
  shared->dim_RV2 = shared->dim_RV2_1 * shared->dim_RV2_2;
  shared->dim_S = shared->dim_S_1 * shared->dim_S_2;
  shared->dim_S_init = shared->dim_S_init_1 * shared->dim_S_init_2;
  shared->dim_V1 = shared->dim_V1_1 * shared->dim_V1_2;
  shared->dim_V1_init = shared->dim_V1_init_1 * shared->dim_V1_init_2;
  shared->dim_V1p = shared->dim_V1p_1 * shared->dim_V1p_2;
  shared->dim_V2 = shared->dim_V2_1 * shared->dim_V2_2;
  shared->dim_V2_init = shared->dim_V2_init_1 * shared->dim_V2_init_2;
  shared->dim_V2p = shared->dim_V2p_1 * shared->dim_V2p_2;
  shared->year_per_age = user_get_array_fixed<real_type, 1>(user, "year_per_age", shared->year_per_age, {shared->dim_year_per_age}, NA_REAL, NA_REAL);
  internal.cases_ij = std::vector<real_type>(shared->dim_cases_ij);
  internal.cases_ijkl = std::vector<real_type>(shared->dim_cases_ijkl);
  internal.d_a = std::vector<real_type>(shared->dim_d_a);
  internal.import_t = std::vector<real_type>(shared->dim_import_t);
  shared->initial_Es = std::vector<real_type>(shared->dim_Es);
  shared->initial_Ev1 = std::vector<real_type>(shared->dim_Ev1);
  shared->initial_Ev2 = std::vector<real_type>(shared->dim_Ev2);
  shared->initial_Is = std::vector<real_type>(shared->dim_Is);
  shared->initial_Iv1 = std::vector<real_type>(shared->dim_Iv1);
  shared->initial_Iv2 = std::vector<real_type>(shared->dim_Iv2);
  shared->initial_M = std::vector<real_type>(shared->dim_M);
  shared->initial_new_IS = std::vector<real_type>(shared->dim_new_IS);
  shared->initial_new_IV1 = std::vector<real_type>(shared->dim_new_IV1);
  shared->initial_new_IV2 = std::vector<real_type>(shared->dim_new_IV2);
  shared->initial_R = std::vector<real_type>(shared->dim_R);
  shared->initial_RV1 = std::vector<real_type>(shared->dim_RV1);
  shared->initial_RV2 = std::vector<real_type>(shared->dim_RV2);
  shared->initial_S = std::vector<real_type>(shared->dim_S);
  shared->initial_V1 = std::vector<real_type>(shared->dim_V1);
  shared->initial_V1p = std::vector<real_type>(shared->dim_V1p);
  shared->initial_V2 = std::vector<real_type>(shared->dim_V2);
  shared->initial_V2p = std::vector<real_type>(shared->dim_V2p);
  internal.lambda = std::vector<real_type>(shared->dim_lambda);
  internal.lambda_t = std::vector<real_type>(shared->dim_lambda_t);
  internal.mean_R = std::vector<real_type>(shared->dim_mean_R);
  internal.mean_RV1 = std::vector<real_type>(shared->dim_mean_RV1);
  internal.mean_RV2 = std::vector<real_type>(shared->dim_mean_RV2);
  internal.mean_S = std::vector<real_type>(shared->dim_mean_S);
  internal.mean_V1 = std::vector<real_type>(shared->dim_mean_V1);
  internal.mean_V1p = std::vector<real_type>(shared->dim_mean_V1p);
  internal.mean_V2 = std::vector<real_type>(shared->dim_mean_V2);
  internal.mean_V2p = std::vector<real_type>(shared->dim_mean_V2p);
  internal.N_ageing_S = std::vector<real_type>(shared->dim_N_ageing_S);
  internal.N_ageing_V1 = std::vector<real_type>(shared->dim_N_ageing_V1);
  internal.N_ageing_V2 = std::vector<real_type>(shared->dim_N_ageing_V2);
  internal.n_EsIs = std::vector<real_type>(shared->dim_n_EsIs);
  internal.n_Ev12v2 = std::vector<real_type>(shared->dim_n_Ev12v2);
  internal.n_Ev1Iv1 = std::vector<real_type>(shared->dim_n_Ev1Iv1);
  internal.n_IsR = std::vector<real_type>(shared->dim_n_IsR);
  internal.n_Iv1R = std::vector<real_type>(shared->dim_n_Iv1R);
  internal.n_Iv2R = std::vector<real_type>(shared->dim_n_Iv2R);
  internal.n_R = std::vector<real_type>(shared->dim_n_R);
  internal.n_RR = std::vector<real_type>(shared->dim_n_RR);
  internal.n_RRV1 = std::vector<real_type>(shared->dim_n_RRV1);
  internal.n_RV1 = std::vector<real_type>(shared->dim_n_RV1);
  internal.n_RV1RV1 = std::vector<real_type>(shared->dim_n_RV1RV1);
  internal.n_RV1RV2 = std::vector<real_type>(shared->dim_n_RV1RV2);
  internal.n_RV2RV2 = std::vector<real_type>(shared->dim_n_RV2RV2);
  internal.n_S = std::vector<real_type>(shared->dim_n_S);
  internal.n_SEs = std::vector<real_type>(shared->dim_n_SEs);
  internal.n_SS = std::vector<real_type>(shared->dim_n_SS);
  internal.N_strat = std::vector<real_type>(shared->dim_N_strat);
  internal.n_SV1 = std::vector<real_type>(shared->dim_n_SV1);
  internal.n_SV1p = std::vector<real_type>(shared->dim_n_SV1p);
  internal.n_SVtot = std::vector<real_type>(shared->dim_n_SVtot);
  internal.n_V1 = std::vector<real_type>(shared->dim_n_V1);
  internal.n_v1E = std::vector<real_type>(shared->dim_n_v1E);
  internal.n_V1p = std::vector<real_type>(shared->dim_n_V1p);
  internal.n_v1pE = std::vector<real_type>(shared->dim_n_v1pE);
  internal.n_V1pV1p = std::vector<real_type>(shared->dim_n_V1pV1p);
  internal.n_V1pV2p = std::vector<real_type>(shared->dim_n_V1pV2p);
  internal.n_V1V1 = std::vector<real_type>(shared->dim_n_V1V1);
  internal.n_V1V2 = std::vector<real_type>(shared->dim_n_V1V2);
  internal.n_V1V2p = std::vector<real_type>(shared->dim_n_V1V2p);
  internal.n_V1V2tot = std::vector<real_type>(shared->dim_n_V1V2tot);
  internal.n_v2E = std::vector<real_type>(shared->dim_n_v2E);
  internal.n_v2pE = std::vector<real_type>(shared->dim_n_v2pE);
  internal.n_V2pV2p = std::vector<real_type>(shared->dim_n_V2pV2p);
  internal.n_V2V2 = std::vector<real_type>(shared->dim_n_V2V2);
  internal.p_SE = std::vector<real_type>(shared->dim_p_SE);
  internal.p_SEv1 = std::vector<real_type>(shared->dim_p_SEv1);
  internal.p_SEv2 = std::vector<real_type>(shared->dim_p_SEv2);
  internal.pop_per_age_s = std::vector<real_type>(shared->dim_pop_per_age_s);
  internal.pop_per_age_v1 = std::vector<real_type>(shared->dim_pop_per_age_v1);
  internal.pop_per_age_v2 = std::vector<real_type>(shared->dim_pop_per_age_v2);
  shared->array_new = user_get_array_fixed<real_type, 2>(user, "array_new", shared->array_new, {shared->dim_array_new_1, shared->dim_array_new_2}, NA_REAL, NA_REAL);
  shared->d = user_get_array_fixed<real_type, 2>(user, "d", shared->d, {shared->dim_d_1, shared->dim_d_2}, NA_REAL, NA_REAL);
  shared->dim_array_cov1 = shared->dim_array_cov1_1 * shared->dim_array_cov1_2 * shared->dim_array_cov1_3;
  shared->dim_array_cov1_12 = shared->dim_array_cov1_1 * shared->dim_array_cov1_2;
  shared->dim_array_cov2 = shared->dim_array_cov2_1 * shared->dim_array_cov2_2 * shared->dim_array_cov2_3;
  shared->dim_array_cov2_12 = shared->dim_array_cov2_1 * shared->dim_array_cov2_2;
  shared->dim_prop_v1 = shared->dim_prop_v1_1 * shared->dim_prop_v1_2;
  shared->dim_prop_v1v2 = shared->dim_prop_v1v2_1 * shared->dim_prop_v1v2_2;
  shared->Es_init = user_get_array_fixed<real_type, 2>(user, "Es_init", shared->Es_init, {shared->dim_Es_init_1, shared->dim_Es_init_2}, NA_REAL, NA_REAL);
  shared->Ev1_init = user_get_array_fixed<real_type, 2>(user, "Ev1_init", shared->Ev1_init, {shared->dim_Ev1_init_1, shared->dim_Ev1_init_2}, NA_REAL, NA_REAL);
  shared->Ev2_init = user_get_array_fixed<real_type, 2>(user, "Ev2_init", shared->Ev2_init, {shared->dim_Ev2_init_1, shared->dim_Ev2_init_2}, NA_REAL, NA_REAL);
  for (int i = 1; i <= shared->dim_new_IS_1; ++i) {
    for (int j = 1; j <= shared->dim_new_IS_2; ++j) {
      shared->initial_new_IS[i - 1 + shared->dim_new_IS_1 * (j - 1)] = 0;
    }
  }
  for (int i = 1; i <= shared->dim_new_IV1_1; ++i) {
    for (int j = 1; j <= shared->dim_new_IV1_2; ++j) {
      shared->initial_new_IV1[i - 1 + shared->dim_new_IV1_1 * (j - 1)] = 0;
    }
  }
  for (int i = 1; i <= shared->dim_new_IV2_1; ++i) {
    for (int j = 1; j <= shared->dim_new_IV2_2; ++j) {
      shared->initial_new_IV2[i - 1 + shared->dim_new_IV2_1 * (j - 1)] = 0;
    }
  }
  shared->Is_init = user_get_array_fixed<real_type, 2>(user, "Is_init", shared->Is_init, {shared->dim_Is_init_1, shared->dim_Is_init_2}, NA_REAL, NA_REAL);
  shared->Iv1_init = user_get_array_fixed<real_type, 2>(user, "Iv1_init", shared->Iv1_init, {shared->dim_Iv1_init_1, shared->dim_Iv1_init_2}, NA_REAL, NA_REAL);
  shared->Iv2_init = user_get_array_fixed<real_type, 2>(user, "Iv2_init", shared->Iv2_init, {shared->dim_Iv2_init_1, shared->dim_Iv2_init_2}, NA_REAL, NA_REAL);
  shared->m = user_get_array_fixed<real_type, 2>(user, "m", shared->m, {shared->dim_m_1, shared->dim_m_2}, NA_REAL, NA_REAL);
  shared->mean_import = user_get_array_fixed<real_type, 2>(user, "mean_import", shared->mean_import, {shared->dim_mean_import_1, shared->dim_mean_import_2}, NA_REAL, NA_REAL);
  shared->offset_variable_Es = shared->dim_M + shared->dim_R + shared->dim_RV1 + shared->dim_RV2 + shared->dim_S + shared->dim_V1 + shared->dim_V1p + shared->dim_V2 + shared->dim_V2p + 4;
  shared->offset_variable_Ev1 = shared->dim_Es + shared->dim_M + shared->dim_R + shared->dim_RV1 + shared->dim_RV2 + shared->dim_S + shared->dim_V1 + shared->dim_V1p + shared->dim_V2 + shared->dim_V2p + 4;
  shared->offset_variable_Ev2 = shared->dim_Es + shared->dim_Ev1 + shared->dim_M + shared->dim_R + shared->dim_RV1 + shared->dim_RV2 + shared->dim_S + shared->dim_V1 + shared->dim_V1p + shared->dim_V2 + shared->dim_V2p + 4;
  shared->offset_variable_Is = shared->dim_Es + shared->dim_Ev1 + shared->dim_Ev2 + shared->dim_M + shared->dim_R + shared->dim_RV1 + shared->dim_RV2 + shared->dim_S + shared->dim_V1 + shared->dim_V1p + shared->dim_V2 + shared->dim_V2p + 4;
  shared->offset_variable_Iv1 = shared->dim_Es + shared->dim_Ev1 + shared->dim_Ev2 + shared->dim_Is + shared->dim_M + shared->dim_R + shared->dim_RV1 + shared->dim_RV2 + shared->dim_S + shared->dim_V1 + shared->dim_V1p + shared->dim_V2 + shared->dim_V2p + 4;
  shared->offset_variable_Iv2 = shared->dim_Es + shared->dim_Ev1 + shared->dim_Ev2 + shared->dim_Is + shared->dim_Iv1 + shared->dim_M + shared->dim_R + shared->dim_RV1 + shared->dim_RV2 + shared->dim_S + shared->dim_V1 + shared->dim_V1p + shared->dim_V2 + shared->dim_V2p + 4;
  shared->offset_variable_M = shared->dim_S + 4;
  shared->offset_variable_new_IS = shared->dim_Es + shared->dim_Ev1 + shared->dim_Ev2 + shared->dim_Is + shared->dim_Iv1 + shared->dim_Iv2 + shared->dim_M + shared->dim_R + shared->dim_RV1 + shared->dim_RV2 + shared->dim_S + shared->dim_V1 + shared->dim_V1p + shared->dim_V2 + shared->dim_V2p + 4;
  shared->offset_variable_new_IV1 = shared->dim_Es + shared->dim_Ev1 + shared->dim_Ev2 + shared->dim_Is + shared->dim_Iv1 + shared->dim_Iv2 + shared->dim_M + shared->dim_new_IS + shared->dim_R + shared->dim_RV1 + shared->dim_RV2 + shared->dim_S + shared->dim_V1 + shared->dim_V1p + shared->dim_V2 + shared->dim_V2p + 4;
  shared->offset_variable_new_IV2 = shared->dim_Es + shared->dim_Ev1 + shared->dim_Ev2 + shared->dim_Is + shared->dim_Iv1 + shared->dim_Iv2 + shared->dim_M + shared->dim_new_IS + shared->dim_new_IV1 + shared->dim_R + shared->dim_RV1 + shared->dim_RV2 + shared->dim_S + shared->dim_V1 + shared->dim_V1p + shared->dim_V2 + shared->dim_V2p + 4;
  shared->offset_variable_R = shared->dim_M + shared->dim_S + shared->dim_V1 + shared->dim_V1p + shared->dim_V2 + shared->dim_V2p + 4;
  shared->offset_variable_RV1 = shared->dim_M + shared->dim_R + shared->dim_S + shared->dim_V1 + shared->dim_V1p + shared->dim_V2 + shared->dim_V2p + 4;
  shared->offset_variable_RV2 = shared->dim_M + shared->dim_R + shared->dim_RV1 + shared->dim_S + shared->dim_V1 + shared->dim_V1p + shared->dim_V2 + shared->dim_V2p + 4;
  shared->offset_variable_V1 = shared->dim_M + shared->dim_S + 4;
  shared->offset_variable_V1p = shared->dim_M + shared->dim_S + shared->dim_V1 + shared->dim_V2 + 4;
  shared->offset_variable_V2 = shared->dim_M + shared->dim_S + shared->dim_V1 + 4;
  shared->offset_variable_V2p = shared->dim_M + shared->dim_S + shared->dim_V1 + shared->dim_V1p + shared->dim_V2 + 4;
  for (int i = 1; i <= shared->dim_p_MS; ++i) {
    shared->p_MS[i - 1] = 1 - dust::math::exp(- shared->delta * shared->dt);
  }
  shared->recov = user_get_array_fixed<real_type, 2>(user, "recov", shared->recov, {shared->dim_recov_1, shared->dim_recov_2}, NA_REAL, NA_REAL);
  shared->S_init = user_get_array_fixed<real_type, 2>(user, "S_init", shared->S_init, {shared->dim_S_init_1, shared->dim_S_init_2}, NA_REAL, NA_REAL);
  shared->V1_init = user_get_array_fixed<real_type, 2>(user, "V1_init", shared->V1_init, {shared->dim_V1_init_1, shared->dim_V1_init_2}, NA_REAL, NA_REAL);
  shared->V2_init = user_get_array_fixed<real_type, 2>(user, "V2_init", shared->V2_init, {shared->dim_V2_init_1, shared->dim_V2_init_2}, NA_REAL, NA_REAL);
  internal.prop_v1 = std::vector<real_type>(shared->dim_prop_v1);
  internal.prop_v1v2 = std::vector<real_type>(shared->dim_prop_v1v2);
  shared->array_cov1 = user_get_array_fixed<real_type, 3>(user, "array_cov1", shared->array_cov1, {shared->dim_array_cov1_1, shared->dim_array_cov1_2, shared->dim_array_cov1_3}, NA_REAL, NA_REAL);
  shared->array_cov2 = user_get_array_fixed<real_type, 3>(user, "array_cov2", shared->array_cov2, {shared->dim_array_cov2_1, shared->dim_array_cov2_2, shared->dim_array_cov2_3}, NA_REAL, NA_REAL);
  for (int i = 1; i <= shared->dim_Es_1; ++i) {
    for (int j = 1; j <= shared->dim_Es_2; ++j) {
      shared->initial_Es[i - 1 + shared->dim_Es_1 * (j - 1)] = shared->Es_init[shared->dim_Es_init_1 * (j - 1) + i - 1];
    }
  }
  for (int i = 1; i <= shared->dim_Ev1_1; ++i) {
    for (int j = 1; j <= shared->dim_Ev1_2; ++j) {
      shared->initial_Ev1[i - 1 + shared->dim_Ev1_1 * (j - 1)] = shared->Ev1_init[shared->dim_Ev1_init_1 * (j - 1) + i - 1];
    }
  }
  for (int i = 1; i <= shared->dim_Ev2_1; ++i) {
    for (int j = 1; j <= shared->dim_Ev2_2; ++j) {
      shared->initial_Ev2[i - 1 + shared->dim_Ev2_1 * (j - 1)] = shared->Ev2_init[shared->dim_Ev2_init_1 * (j - 1) + i - 1];
    }
  }
  for (int i = 1; i <= shared->dim_Is_1; ++i) {
    for (int j = 1; j <= shared->dim_Is_2; ++j) {
      shared->initial_Is[i - 1 + shared->dim_Is_1 * (j - 1)] = shared->Is_init[shared->dim_Is_init_1 * (j - 1) + i - 1];
    }
  }
  for (int i = 1; i <= shared->dim_Iv1_1; ++i) {
    for (int j = 1; j <= shared->dim_Iv1_2; ++j) {
      shared->initial_Iv1[i - 1 + shared->dim_Iv1_1 * (j - 1)] = shared->Iv1_init[shared->dim_Iv1_init_1 * (j - 1) + i - 1];
    }
  }
  for (int i = 1; i <= shared->dim_Iv2_1; ++i) {
    for (int j = 1; j <= shared->dim_Iv2_2; ++j) {
      shared->initial_Iv2[i - 1 + shared->dim_Iv2_1 * (j - 1)] = shared->Iv2_init[shared->dim_Iv2_init_1 * (j - 1) + i - 1];
    }
  }
  for (int i = 1; i <= shared->dim_M_1; ++i) {
    for (int j = 1; j <= shared->dim_M_2; ++j) {
      shared->initial_M[i - 1 + shared->dim_M_1 * (j - 1)] = (i == 1 ? dust::math::round(shared->S_init[shared->dim_S_init_1 * (j - 1) + i - 1] * 1 / (real_type) (shared->delta * 365)) : 0);
    }
  }
  for (int i = 1; i <= shared->dim_R_1; ++i) {
    for (int j = 1; j <= shared->dim_R_2; ++j) {
      shared->initial_R[i - 1 + shared->dim_R_1 * (j - 1)] = dust::math::round(shared->S_init[shared->dim_S_init_1 * (j - 1) + i - 1] * shared->recov[shared->dim_recov_1 * (j - 1) + i - 1]);
    }
  }
  for (int i = 1; i <= shared->dim_RV1_1; ++i) {
    for (int j = 1; j <= shared->dim_RV1_2; ++j) {
      shared->initial_RV1[i - 1 + shared->dim_RV1_1 * (j - 1)] = dust::math::round(shared->V1_init[shared->dim_V1_init_1 * (j - 1) + i - 1] * shared->v_fail * (shared->recov[shared->dim_recov_1 * (j - 1) + i - 1]));
    }
  }
  for (int i = 1; i <= shared->dim_RV2_1; ++i) {
    for (int j = 1; j <= shared->dim_RV2_2; ++j) {
      shared->initial_RV2[i - 1 + shared->dim_RV2_1 * (j - 1)] = dust::math::round(shared->V2_init[shared->dim_V2_init_1 * (j - 1) + i - 1] * (dust::math::pow<real_type>(shared->v_fail, 2)) * (shared->recov[shared->dim_recov_1 * (j - 1) + i - 1]));
    }
  }
  for (int i = 1; i <= shared->dim_S_1; ++i) {
    for (int j = 1; j <= shared->dim_S_2; ++j) {
      shared->initial_S[i - 1 + shared->dim_S_1 * (j - 1)] = (i == 1 ? dust::math::round(shared->S_init[shared->dim_S_init_1 * (j - 1) + i - 1] * (1 - 1 / (real_type) (shared->delta * 365))) : dust::math::round(shared->S_init[shared->dim_S_init_1 * (j - 1) + i - 1] * (1 - shared->recov[shared->dim_recov_1 * (j - 1) + i - 1])));
    }
  }
  for (int i = 1; i <= shared->dim_V1_1; ++i) {
    for (int j = 1; j <= shared->dim_V1_2; ++j) {
      shared->initial_V1[i - 1 + shared->dim_V1_1 * (j - 1)] = dust::math::round(shared->V1_init[shared->dim_V1_init_1 * (j - 1) + i - 1] * shared->v_fail * (1 - shared->recov[shared->dim_recov_1 * (j - 1) + i - 1]));
    }
  }
  for (int i = 1; i <= shared->dim_V1p_1; ++i) {
    for (int j = 1; j <= shared->dim_V1p_2; ++j) {
      shared->initial_V1p[i - 1 + shared->dim_V1p_1 * (j - 1)] = dust::math::round(shared->V1_init[shared->dim_V1_init_1 * (j - 1) + i - 1] * (1 - shared->v_fail));
    }
  }
  for (int i = 1; i <= shared->dim_V2_1; ++i) {
    for (int j = 1; j <= shared->dim_V2_2; ++j) {
      shared->initial_V2[i - 1 + shared->dim_V2_1 * (j - 1)] = dust::math::round(shared->V2_init[shared->dim_V2_init_1 * (j - 1) + i - 1] * (dust::math::pow<real_type>(shared->v_fail, 2)) * (1 - shared->recov[shared->dim_recov_1 * (j - 1) + i - 1]));
    }
  }
  for (int i = 1; i <= shared->dim_V2p_1; ++i) {
    for (int j = 1; j <= shared->dim_V2p_2; ++j) {
      shared->initial_V2p[i - 1 + shared->dim_V2p_1 * (j - 1)] = dust::math::round(shared->V2_init[shared->dim_V2_init_1 * (j - 1) + i - 1] * (1 - dust::math::pow<real_type>(shared->v_fail, 2)));
    }
  }
  return dust::pars_type<seirv_age_region>(shared, internal);
}
template <>
cpp11::sexp dust_info<seirv_age_region>(const dust::pars_type<seirv_age_region>& pars) {
  const std::shared_ptr<const seirv_age_region::shared_type> shared = pars.shared;
  cpp11::writable::strings nms({"time", "iter", "new_Iv1_tot", "new_Iv2_tot", "S", "M", "V1", "V2", "V1p", "V2p", "R", "RV1", "RV2", "Es", "Ev1", "Ev2", "Is", "Iv1", "Iv2", "new_IS", "new_IV1", "new_IV2"});
  cpp11::writable::list dim(22);
  dim[0] = cpp11::writable::integers({1});
  dim[1] = cpp11::writable::integers({1});
  dim[2] = cpp11::writable::integers({1});
  dim[3] = cpp11::writable::integers({1});
  dim[4] = cpp11::writable::integers({shared->dim_S_1, shared->dim_S_2});
  dim[5] = cpp11::writable::integers({shared->dim_M_1, shared->dim_M_2});
  dim[6] = cpp11::writable::integers({shared->dim_V1_1, shared->dim_V1_2});
  dim[7] = cpp11::writable::integers({shared->dim_V2_1, shared->dim_V2_2});
  dim[8] = cpp11::writable::integers({shared->dim_V1p_1, shared->dim_V1p_2});
  dim[9] = cpp11::writable::integers({shared->dim_V2p_1, shared->dim_V2p_2});
  dim[10] = cpp11::writable::integers({shared->dim_R_1, shared->dim_R_2});
  dim[11] = cpp11::writable::integers({shared->dim_RV1_1, shared->dim_RV1_2});
  dim[12] = cpp11::writable::integers({shared->dim_RV2_1, shared->dim_RV2_2});
  dim[13] = cpp11::writable::integers({shared->dim_Es_1, shared->dim_Es_2});
  dim[14] = cpp11::writable::integers({shared->dim_Ev1_1, shared->dim_Ev1_2});
  dim[15] = cpp11::writable::integers({shared->dim_Ev2_1, shared->dim_Ev2_2});
  dim[16] = cpp11::writable::integers({shared->dim_Is_1, shared->dim_Is_2});
  dim[17] = cpp11::writable::integers({shared->dim_Iv1_1, shared->dim_Iv1_2});
  dim[18] = cpp11::writable::integers({shared->dim_Iv2_1, shared->dim_Iv2_2});
  dim[19] = cpp11::writable::integers({shared->dim_new_IS_1, shared->dim_new_IS_2});
  dim[20] = cpp11::writable::integers({shared->dim_new_IV1_1, shared->dim_new_IV1_2});
  dim[21] = cpp11::writable::integers({shared->dim_new_IV2_1, shared->dim_new_IV2_2});
  dim.names() = nms;
  cpp11::writable::list index(22);
  index[0] = cpp11::writable::integers({1});
  index[1] = cpp11::writable::integers({2});
  index[2] = cpp11::writable::integers({3});
  index[3] = cpp11::writable::integers({4});
  index[4] = integer_sequence(5, shared->dim_S);
  index[5] = integer_sequence(shared->offset_variable_M + 1, shared->dim_M);
  index[6] = integer_sequence(shared->offset_variable_V1 + 1, shared->dim_V1);
  index[7] = integer_sequence(shared->offset_variable_V2 + 1, shared->dim_V2);
  index[8] = integer_sequence(shared->offset_variable_V1p + 1, shared->dim_V1p);
  index[9] = integer_sequence(shared->offset_variable_V2p + 1, shared->dim_V2p);
  index[10] = integer_sequence(shared->offset_variable_R + 1, shared->dim_R);
  index[11] = integer_sequence(shared->offset_variable_RV1 + 1, shared->dim_RV1);
  index[12] = integer_sequence(shared->offset_variable_RV2 + 1, shared->dim_RV2);
  index[13] = integer_sequence(shared->offset_variable_Es + 1, shared->dim_Es);
  index[14] = integer_sequence(shared->offset_variable_Ev1 + 1, shared->dim_Ev1);
  index[15] = integer_sequence(shared->offset_variable_Ev2 + 1, shared->dim_Ev2);
  index[16] = integer_sequence(shared->offset_variable_Is + 1, shared->dim_Is);
  index[17] = integer_sequence(shared->offset_variable_Iv1 + 1, shared->dim_Iv1);
  index[18] = integer_sequence(shared->offset_variable_Iv2 + 1, shared->dim_Iv2);
  index[19] = integer_sequence(shared->offset_variable_new_IS + 1, shared->dim_new_IS);
  index[20] = integer_sequence(shared->offset_variable_new_IV1 + 1, shared->dim_new_IV1);
  index[21] = integer_sequence(shared->offset_variable_new_IV2 + 1, shared->dim_new_IV2);
  index.names() = nms;
  size_t len = shared->offset_variable_new_IV2 + shared->dim_new_IV2;
  using namespace cpp11::literals;
  return cpp11::writable::list({
           "dim"_nm = dim,
           "len"_nm = len,
           "index"_nm = index});
}
}

cpp11::sexp dust_seirv_age_region_gpu_info() {
  return dust::gpu::r::gpu_info();
}
using model_cpu = dust::dust_cpu<seirv_age_region>;

cpp11::sexp dust_cpu_seirv_age_region_capabilities() {
  return dust::r::dust_capabilities<model_cpu>();
}

SEXP dust_cpu_seirv_age_region_alloc(cpp11::list r_pars, bool pars_multi, cpp11::sexp r_time,
                             cpp11::sexp r_n_particles, int n_threads,
                             cpp11::sexp r_seed, bool deterministic,
                             cpp11::sexp gpu_config, cpp11::sexp ode_control) {
  return dust::r::dust_cpu_alloc<seirv_age_region>(r_pars, pars_multi, r_time, r_n_particles,
                                        n_threads, r_seed, deterministic,
                                        gpu_config, ode_control);
}

SEXP dust_cpu_seirv_age_region_run(SEXP ptr, cpp11::sexp r_time_end) {
  return dust::r::dust_run<model_cpu>(ptr, r_time_end);
}

SEXP dust_cpu_seirv_age_region_simulate(SEXP ptr, cpp11::sexp r_time_end) {
  return dust::r::dust_simulate<model_cpu>(ptr, r_time_end);
}

SEXP dust_cpu_seirv_age_region_run_adjoint(SEXP ptr) {
  return dust::r::dust_run_adjoint<model_cpu>(ptr);
}

SEXP dust_cpu_seirv_age_region_set_index(SEXP ptr, cpp11::sexp r_index) {
  dust::r::dust_set_index<model_cpu>(ptr, r_index);
  return R_NilValue;
}

SEXP dust_cpu_seirv_age_region_update_state(SEXP ptr, SEXP r_pars, SEXP r_state,
                                           SEXP r_time, SEXP r_set_initial_state, SEXP index, SEXP reset_step_size) {
  return dust::r::dust_update_state<model_cpu>(ptr, r_pars, r_state, r_time,
                                                      r_set_initial_state, index, reset_step_size);
}

SEXP dust_cpu_seirv_age_region_state(SEXP ptr, SEXP r_index) {
  return dust::r::dust_state<model_cpu>(ptr, r_index);
}

SEXP dust_cpu_seirv_age_region_time(SEXP ptr) {
  return dust::r::dust_time<model_cpu>(ptr);
}

void dust_cpu_seirv_age_region_reorder(SEXP ptr, cpp11::sexp r_index) {
  return dust::r::dust_reorder<model_cpu>(ptr, r_index);
}

SEXP dust_cpu_seirv_age_region_resample(SEXP ptr, cpp11::doubles r_weights) {
  return dust::r::dust_resample<model_cpu>(ptr, r_weights);
}

SEXP dust_cpu_seirv_age_region_rng_state(SEXP ptr, bool first_only, bool last_only) {
  return dust::r::dust_rng_state<model_cpu>(ptr, first_only, last_only);
}

SEXP dust_cpu_seirv_age_region_set_rng_state(SEXP ptr, cpp11::raws rng_state) {
  dust::r::dust_set_rng_state<model_cpu>(ptr, rng_state);
  return R_NilValue;
}

SEXP dust_cpu_seirv_age_region_set_data(SEXP ptr, cpp11::list data,
                                       bool shared) {
  dust::r::dust_set_data<model_cpu>(ptr, data, shared);
  return R_NilValue;
}

SEXP dust_cpu_seirv_age_region_compare_data(SEXP ptr) {
  return dust::r::dust_compare_data<model_cpu>(ptr);
}

SEXP dust_cpu_seirv_age_region_filter(SEXP ptr, SEXP time_end,
                                     bool save_trajectories,
                                     cpp11::sexp time_snapshot,
                                     cpp11::sexp min_log_likelihood) {
  return dust::r::dust_filter<model_cpu>(ptr, time_end,
                                                save_trajectories,
                                                time_snapshot,
                                                min_log_likelihood);
}

void dust_cpu_seirv_age_region_set_n_threads(SEXP ptr, int n_threads) {
  return dust::r::dust_set_n_threads<model_cpu>(ptr, n_threads);
}

int dust_cpu_seirv_age_region_n_state(SEXP ptr) {
  return dust::r::dust_n_state<model_cpu>(ptr);
}

void dust_cpu_seirv_age_region_set_stochastic_schedule(SEXP ptr, SEXP time) {
  dust::r::dust_set_stochastic_schedule<model_cpu>(ptr, time);
}

SEXP dust_cpu_seirv_age_region_ode_statistics(SEXP ptr) {
  return dust::r::dust_ode_statistics<model_cpu>(ptr);
}
